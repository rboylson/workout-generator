{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/AddWorkout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Grid, Box, Button as GrommetButton, Select, Text, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddWorkout(props) {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  function addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput) {\n    let url = `http://localhost:3000/workouts/`;\n    let body = {\n      name: exerciseNameInput,\n      type: exerciseTypeInput,\n      timing: exerciseTargetInput,\n      target: exerciseTimingInput\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    props.setUrlUpdated(url);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      pad: {\n        top: 'small',\n        left: 'small',\n        bottom: 'medium'\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        size: \"large\",\n        children: \"Add Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pad: {\n        horizontal: 'small',\n        bottom: 'medium'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        fill: true,\n        columns: ['medium', 'medium', 'medium', 'xsmall', 'xsmall'],\n        rows: ['flex'],\n        gap: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Exercise Name\",\n          value: exerciseNameInput,\n          onChange: event => setExerciseNameInput(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Exercise Type\",\n          value: exerciseTypeInput,\n          onSelect: event => setExerciseTypeInput(event.suggestion),\n          suggestions: typeExercises\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Exercise Target\",\n          value: exerciseTargetInput,\n          onSelect: event => setExerciseTargetInput(event.suggestion),\n          suggestions: targetExercises\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Timing\",\n          value: exerciseTimingInput,\n          onChange: event => setExerciseTimingInput(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GrommetButton, {\n          label: \"Add\",\n          onClick: () => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddWorkout, \"dxHdReMn0JMQaDG1GDX83LIanGg=\");\n\n_c = AddWorkout;\nexport default AddWorkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWorkout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/AddWorkout.js"],"names":["useEffect","useState","Grid","Box","Button","GrommetButton","Select","Text","TextInput","AddWorkout","props","typeExercises","targetExercises","type","setType","targets","setTarget","exerciseNameInput","setExerciseNameInput","exerciseTypeInput","setExerciseTypeInput","exerciseTargetInput","setExerciseTargetInput","exerciseTimingInput","setExerciseTimingInput","fetch","then","response","json","map","element","index","name","addExerciseToList","url","body","timing","target","method","headers","Accept","JSON","stringify","setUrlUpdated","top","left","bottom","horizontal","event","value","suggestion"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Grid, Box, Button as GrommetButton, Select, Text, TextInput } from 'grommet';\n\n\nfunction AddWorkout( props ) {  \n  \n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  function addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput ) {\n    let url = `http://localhost:3000/workouts/`;\n  \n    let body = {\n      name: exerciseNameInput,\n      type: exerciseTypeInput,\n      timing: exerciseTargetInput,\n      target: exerciseTimingInput\n    };\n  \n    fetch(url, {\n      method: 'POST',\n      headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n      },\n      body: JSON.stringify(body)\n    });\n  \n    props.setUrlUpdated(url);\n  \n  }\n\n  return (\n    <div>\n\n      <Box pad={{top: 'small', left: 'small', bottom: 'medium'}} >\n        <Text size=\"large\" >\n            Add Workout\n        </Text>\n      </Box>\n\n      <Box pad={{horizontal: 'small', bottom: 'medium'}} >\n        <Grid\n          fill\n          columns={['medium', 'medium', 'medium', 'xsmall', 'xsmall']}\n          rows={['flex']}\n          gap=\"small\"\n        >\n          <TextInput \n            placeholder=\"Exercise Name\" \n            value={exerciseNameInput}\n            onChange={event => setExerciseNameInput(event.target.value)}\n          />\n          <TextInput\n            placeholder=\"Exercise Type\"\n            value={exerciseTypeInput}\n            onSelect={event => setExerciseTypeInput(event.suggestion)}\n            suggestions={typeExercises}\n          />   \n\n          <TextInput\n            placeholder=\"Exercise Target\"\n            value={exerciseTargetInput}\n            onSelect={event => setExerciseTargetInput(event.suggestion)}\n            suggestions={targetExercises}\n          />\n\n          <TextInput \n            placeholder=\"Timing\" \n            value={exerciseTimingInput}\n            onChange={event => setExerciseTimingInput(event.target.value)}\n          />\n          \n          <GrommetButton \n            label=\"Add\" \n            onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput )} \n          />\n      </Grid>\n    </Box>\n    </div>\n  );\n}\n\nexport default AddWorkout;\n"]},"metadata":{},"sourceType":"module"}