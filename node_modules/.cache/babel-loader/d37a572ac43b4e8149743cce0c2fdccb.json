{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/ExerciseList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Exercise from './Exercise.js'; // import AddWorkout from './AddWorkout.js';\n\nimport { Box, Button as GrommetButton, Grid, Table, TableBody, TableCell, TableHeader, TableRow, Text, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExerciseList() {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n  let [urlUpdated, setUrlUpdated] = useState(0);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/workouts').then(response => response.json()).then(setList);\n  }, [urlUpdated]);\n\n  function addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput) {\n    let url = `http://localhost:3000/workouts/`;\n    let body = {\n      name: exerciseNameInput,\n      type: exerciseTypeInput,\n      timing: exerciseTargetInput,\n      target: exerciseTimingInput\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    setUrlUpdated(urlUpdated++);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-list\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      size: \"large\",\n      textAlign: \"center\",\n      children: \"Exercises\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      fill: true,\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        fill: true,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          size: \"xlarge\",\n          width: \"full\",\n          children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  size: \"medium\" // weight=\"800\"\n                  ,\n                  children: \"Exercise Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  size: \"medium\" // weight=\"800\"\n                  ,\n                  children: \"Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  size: \"medium\" // weight=\"800\"\n                  ,\n                  children: \"Target\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  size: \"medium\" // weight=\"800\"\n                  ,\n                  children: \"Timing\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: list.map(item => /*#__PURE__*/_jsxDEV(Exercise, {\n              id: item.id,\n              name: item.name,\n              type: item.type,\n              timing: item.timing,\n              target: item.target\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          size: \"large\",\n          textAlign: \"center\",\n          children: \"Add Exercise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          fill: true,\n          columns: ['small', 'xsmall', 'small', 'xsmall', 'xsmall'],\n          rows: ['flex'],\n          gap: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Exercise Name\",\n            value: exerciseNameInput,\n            onChange: event => setExerciseNameInput(event.target.value),\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Exercise Type\",\n            value: exerciseTypeInput,\n            onSelect: event => setExerciseTypeInput(event.suggestion),\n            suggestions: typeExercises,\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Exercise Target\",\n            value: exerciseTargetInput,\n            onSelect: event => setExerciseTargetInput(event.suggestion),\n            suggestions: targetExercises,\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Timing\",\n            value: exerciseTimingInput,\n            onChange: event => setExerciseTimingInput(event.target.value),\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(GrommetButton, {\n            label: \"Add\",\n            onClick: () => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExerciseList, \"zIlPxqXbZKSe7rIZP/TB1XpWusw=\");\n\n_c = ExerciseList;\nexport default ExerciseList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExerciseList\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/ExerciseList.js"],"names":["useEffect","useState","Exercise","Box","Button","GrommetButton","Grid","Table","TableBody","TableCell","TableHeader","TableRow","Text","TextInput","ExerciseList","typeExercises","targetExercises","type","setType","targets","setTarget","exerciseNameInput","setExerciseNameInput","exerciseTypeInput","setExerciseTypeInput","exerciseTargetInput","setExerciseTargetInput","exerciseTimingInput","setExerciseTimingInput","urlUpdated","setUrlUpdated","fetch","then","response","json","map","element","index","name","list","setList","addExerciseToList","url","body","timing","target","method","headers","Accept","JSON","stringify","item","id","event","value","suggestion"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport Exercise from './Exercise.js';\n// import AddWorkout from './AddWorkout.js';\nimport { Box, Button as GrommetButton, Grid, Table, TableBody, TableCell, TableHeader, TableRow, Text, TextInput } from 'grommet';\n\nfunction ExerciseList() {\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n  let [urlUpdated, setUrlUpdated] = useState(0);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  const [list, setList] = useState([]);\n  useEffect(()=>{\n    fetch('http://localhost:3000/workouts')\n      .then(response => response.json())\n      .then(setList);\n  }, [urlUpdated]);\n\n\nfunction addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput) {\n  let url = `http://localhost:3000/workouts/`;\n\n  let body = {\n    name: exerciseNameInput,\n    type: exerciseTypeInput,\n    timing: exerciseTargetInput,\n    target: exerciseTimingInput\n  };\n\n  fetch(url, {\n    method: 'POST',\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n    },\n    body: JSON.stringify(body)\n  });\n\n  setUrlUpdated(urlUpdated++);\n}\n\n\n\n  return (\n    <div className=\"exercise-list\">\n      <Text\n        size=\"large\"\n        textAlign=\"center\"\n      >\n        Exercises\n      </Text>\n      <Box fill align=\"center\">\n        <Grid\n          fill\n        >\n          <Table\n            size=\"xlarge\"\n            width=\"full\"\n          >\n            <TableHeader>\n              <TableRow>\n                <TableCell>\n                  <Text\n                    size=\"medium\"\n                    // weight=\"800\"\n                  >\n                    Exercise Name\n                  </Text>\n                </TableCell>\n                <TableCell>\n                  <Text\n                    size=\"medium\"\n                    // weight=\"800\"\n                  >\n                    Type\n                  </Text>\n                </TableCell>\n                <TableCell>\n                  <Text\n                    size=\"medium\"\n                    // weight=\"800\"\n                  >\n                    Target\n                  </Text>\n                </TableCell>\n                <TableCell>\n                  <Text\n                    size=\"medium\"\n                    // weight=\"800\"\n                  >\n                    Timing\n                  </Text>\n                </TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {list.map(item =>\n                <Exercise \n                  key={ item.id }\n                  id={ item.id } \n                  name={ item.name } \n                  type={ item.type } \n                  timing={ item.timing } \n                  target={ item.target } \n                />\n              )}\n            </TableBody>\n          </Table>\n        </Grid>\n      </Box>\n      <Box>\n        <div>\n        <Text\n          size=\"large\"\n          textAlign=\"center\"\n        >\n          Add Exercise\n        </Text>\n        <Grid\n          fill\n          columns={['small', 'xsmall', 'small', 'xsmall', 'xsmall']}\n          rows={['flex']}\n          gap=\"small\"\n        >\n          <TextInput \n            placeholder=\"Exercise Name\" \n            value={exerciseNameInput}\n            onChange={event => setExerciseNameInput(event.target.value)}\n            className=\"add-workout-cell\"\n          />\n          <TextInput\n            placeholder=\"Exercise Type\"\n            value={exerciseTypeInput}\n            onSelect={event => setExerciseTypeInput(event.suggestion)}\n            suggestions={typeExercises}\n            className=\"add-workout-cell\"\n          />        \n          <TextInput\n            placeholder=\"Exercise Target\"\n            value={exerciseTargetInput}\n            onSelect={event => setExerciseTargetInput(event.suggestion)}\n            suggestions={targetExercises}\n            className=\"add-workout-cell\"\n          />\n          <TextInput \n            placeholder=\"Timing\" \n            value={exerciseTimingInput}\n            onChange={event => setExerciseTimingInput(event.target.value)}\n            className=\"add-workout-cell\" \n          />\n          <GrommetButton \n            label=\"Add\" \n            onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)} \n          />\n      </Grid>\n      </div>\n      </Box>\n\n      \n      \n    </div>\n  );\n}\n\nexport default ExerciseList;\n"]},"metadata":{},"sourceType":"module"}