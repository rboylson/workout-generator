{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Button as GrommetButton, CheckBox, Layer, List, Text, ThemeContext } from 'grommet';\nimport { Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet checkedNum = 0;\nlet inspirationalQuotes = [\"Bravo!\", \"You did it!\", \"You did it! Treat yo-self (but make sure it's healthy)\", \"Brava, Brava, Bravissima!\"];\n\nfunction randomizeQuery(query, workoutArray, workoutReps, workoutTarget) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": 0,\n      \"checked\": false\n    };\n\n    if (workoutArray[j].target.indexOf(workoutTarget) === -1) {\n      workoutArray.splice(j, 1);\n    }\n  }\n\n  workoutArray = workoutArray.filter(i => i);\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n\n  return workoutArray;\n}\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const [query, setQuery] = useState([]);\n  let workoutTypeJson = \"\";\n\n  if (state) {\n    const {\n      workoutType,\n      workoutTarget,\n      workoutReps\n    } = state;\n\n    for (var m = 0; m < state.workoutType.length; m++) {\n      workoutTypeJson += \"type=\" + workoutType[m] + \"&\";\n    }\n  } else {\n    const workoutType = [];\n    const workoutTarget = [];\n    const workoutReps = \"\";\n  }\n\n  let workoutArray = [];\n  let url = `https://my-json-server.typicode.com/rboylson/workout-generator-json/workouts?${workoutTypeJson}`;\n  let [showLayer, setShowLayer] = useState(false);\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n  randomizeQuery(query, workoutArray, workoutReps, workoutTarget);\n  workoutArray = workoutArray.filter(i => i);\n\n  function setChecked(event, workoutArray) {\n    if (event) {\n      checkedNum++;\n    } else {\n      checkedNum--;\n    }\n\n    if (checkedNum === workoutArray.filter(checkCount).length) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  function checkCount(item) {\n    return item.count > 0;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      pad: \"xlarge\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        pad: \"large\",\n        data: workoutArray.filter(checkCount),\n        primaryKey: item => /*#__PURE__*/_jsxDEV(Text, {\n          size: \"xlarge\",\n          children: [item.name, \": \", item.timing]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 35\n        }, this),\n        secondaryKey: item => /*#__PURE__*/_jsxDEV(Text, {\n          size: \"large\",\n          children: [\"Repeat \", item.count, \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 37\n        }, this),\n        action: item => /*#__PURE__*/_jsxDEV(CheckBox, {\n          pad: \"medium\",\n          onChange: event => setChecked(event.target.checked, workoutArray, showLayer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), showLayer && /*#__PURE__*/_jsxDEV(Layer, {\n      full: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        fill: true,\n        background: \"purple\",\n        align: \"center\",\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"large\",\n          children: /*#__PURE__*/_jsxDEV(ThemeContext.Extend, {\n            value: {\n              text: {\n                extend: () => `\n                        color: #ffdbe1;\n                      `\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              size: \"xlarge\",\n              textAlign: \"center\",\n              margin: {\n                bottom: \"20px\"\n              },\n              children: inspirationalQuotes[Math.floor(Math.random() * inspirationalQuotes.length)]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ThemeContext.Extend, {\n          value: {\n            button: {\n              extend: () => `\n                    color: purple;\n                    background-color: #ffdbe1;\n                    border-radius: 50px;\n\n                    &:hover {\n                      border-color: #ffdbe1;\n                    }\n                  `\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            render: ({\n              history\n            }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n              label: \"Finish Workout\",\n              margin: {\n                top: \"10px\",\n                bottom: \"90px\"\n              },\n              border: {\n                radius: \"50px\"\n              },\n              size: \"large\",\n              onClick: () => {\n                setShowLayer(false);\n                history.push({\n                  pathname: '/workout',\n                  state: inspirationalQuotes\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"iM+XlsJ0dTnQt0xASvfHNqy91mA=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","Box","Button","GrommetButton","CheckBox","Layer","List","Text","ThemeContext","Route","checkedNum","inspirationalQuotes","randomizeQuery","query","workoutArray","workoutReps","workoutTarget","j","length","target","indexOf","splice","filter","i","randomNumber","Math","floor","random","count","Workout","props","state","setQuery","workoutTypeJson","workoutType","m","url","showLayer","setShowLayer","fetch","then","response","json","setChecked","event","checkCount","item","name","timing","checked","text","extend","bottom","button","history","top","radius","push","pathname"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Button as GrommetButton, CheckBox, Layer, List, Text, ThemeContext } from 'grommet';\nimport { Route } from 'react-router-dom';\n\nlet checkedNum = 0;\nlet inspirationalQuotes = [\n  \"Bravo!\",\n  \"You did it!\",\n  \"You did it! Treat yo-self (but make sure it's healthy)\",\n  \"Brava, Brava, Bravissima!\"\n]\n\nfunction randomizeQuery(query, workoutArray, workoutReps, workoutTarget) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": 0, \"checked\": false };\n    \n    if(workoutArray[j].target.indexOf(workoutTarget) === -1) {\n      workoutArray.splice(j, 1);\n    }\n  }\n\n  workoutArray = workoutArray.filter(i => i);\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }  \n\n  return workoutArray;\n}\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const [query, setQuery] = useState([]);\n  let workoutTypeJson = \"\";\n\n\n  if (state ) {\n    const {workoutType, workoutTarget, workoutReps } = state;\n\n  for (var m = 0; m < state.workoutType.length; m++) {\n    workoutTypeJson += \"type=\" + workoutType[m] + \"&\";\n  }\n  } else {\n    const workoutType = [];\n    const workoutTarget = [];\n    const workoutReps = \"\";\n\n  }\n\n  \n\n  let workoutArray = [];\n  let url = `https://my-json-server.typicode.com/rboylson/workout-generator-json/workouts?${workoutTypeJson}`;\n  let [showLayer, setShowLayer] = useState(false);\n\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  randomizeQuery(query, workoutArray, workoutReps, workoutTarget);\n  workoutArray = workoutArray.filter(i => i);\n\n  function setChecked(event, workoutArray) {\n    if (event) { checkedNum++ } else { checkedNum-- }\n    if (checkedNum === workoutArray.filter(checkCount).length ) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  function checkCount(item) {\n    return item.count > 0;\n  }\n\n  return (\n    <div>\n      <Box\n        justify=\"center\"\n        pad=\"xlarge\"\n      >\n        <List\n          pad=\"large\"\n          data={ workoutArray.filter(checkCount) }\n          primaryKey = { item => (<Text size=\"xlarge\">{item.name}: {item.timing}</Text>) }\n          secondaryKey = { item => (<Text size=\"large\">Repeat {item.count}x</Text>) }\n          action={(item) => (\n            <CheckBox \n              pad=\"medium\"\n              onChange={(event) => setChecked(event.target.checked, workoutArray, showLayer)}\n            />\n          )}\n        />\n      </Box>\n\n      {showLayer && (\n        <Layer full>\n          <Box \n            fill \n            background=\"purple\" \n            align=\"center\" \n            justify=\"center\" >\n            <Box width=\"large\">\n              <ThemeContext.Extend\n                value={{\n                    text: {\n                      extend: () => `\n                        color: #ffdbe1;\n                      `,\n                  },\n                }}\n              >\n                <Text\n                  size=\"xlarge\"\n                  textAlign=\"center\"\n                  margin={{\n                    bottom: \"20px\"\n                  }}>\n                  { inspirationalQuotes[Math.floor(Math.random() * (inspirationalQuotes.length))] }\n                </Text>\n              </ThemeContext.Extend>\n            </Box>\n            <ThemeContext.Extend\n              value={{\n                button: {\n                  extend: () => `\n                    color: purple;\n                    background-color: #ffdbe1;\n                    border-radius: 50px;\n\n                    &:hover {\n                      border-color: #ffdbe1;\n                    }\n                  `,\n                },\n              }}\n            >\n              <Route render={({ history }) => (\n                <GrommetButton \n                  label=\"Finish Workout\"\n                  margin={{\n                    top: \"10px\",\n                    bottom: \"90px\",\n                  }}\n                  border={{\n                    radius: \"50px\",\n                  }}\n                  size=\"large\"\n                  onClick={() => { \n                    setShowLayer(false)\n                    history.push( {\n                      pathname: '/workout',\n                      state: inspirationalQuotes\n                    });\n                  }} >\n                </GrommetButton>\n              )} />\n            </ThemeContext.Extend>\n          </Box>\n        </Layer>\n      )}\n    </div>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}