{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport './WorkoutGenerator.scss';\nimport { Box, Button as GrommetButton, Grid, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkoutGenerator() {\n  _s();\n\n  const typeExercises = [\"Stretch\", \"Exercise\"];\n  const targetExercises = [\"Core\", \"Legs\", \"Arms\"];\n  const [type, setType] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  const [targets, setTarget] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"workout-generator-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"workoutType\",\n          className: \"inputType\",\n          name: \"workoutType\",\n          children: type.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.name,\n            children: item.name\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"workoutTarget\",\n          className: \"inputTarget\",\n          name: \"workoutTarget\",\n          children: targets.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.name,\n            children: item.name\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"reps\",\n          id: \"workoutTiming\",\n          className: \"inputTiming\",\n          name: \"workoutTiming\",\n          placeholder: \"Reps\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Add Exercise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          fill: true,\n          columns: ['small', 'xsmall', 'small', 'xsmall', 'xsmall'],\n          rows: ['flex'],\n          gap: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Exercise Type\" // value={exerciseTypeInput}\n            // onSelect={event => setExerciseTypeInput(event.suggestion)}\n            ,\n            suggestions: typeExercises,\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Exercise Target\" // value={exerciseTargetInput}\n            // onSelect={event => setExerciseTargetInput(event.suggestion)}\n            ,\n            suggestions: targetExercises,\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Reps\" // value={exerciseTimingInput}\n            // onChange={event => setExerciseTimingInput(event.target.value)}\n            ,\n            className: \"add-workout-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(GrommetButton, {\n            label: \"Add\" // onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)} \n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        render: ({\n          history\n        }) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            let workoutType = document.querySelector(\"#workoutType\").value;\n            let workoutTarget = document.querySelector(\"#workoutTarget\").value;\n            let workoutReps = document.querySelector(\"#workoutTiming\").value;\n\n            if (workoutReps === \"\") {\n              workoutReps = \"12\";\n            }\n\n            history.push({\n              pathname: '/start',\n              state: {\n                workoutType: workoutType,\n                workoutTarget: workoutTarget,\n                workoutReps: workoutReps\n              }\n            });\n          },\n          children: \"Start Workout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"Z42eTa+zSGzvLsupVP/c9zURCuQ=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","Box","Button","GrommetButton","Grid","TextInput","WorkoutGenerator","typeExercises","targetExercises","type","setType","fetch","then","response","json","targets","setTarget","map","item","name","id","history","workoutType","document","querySelector","value","workoutTarget","workoutReps","push","pathname","state"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState } from 'react';\nimport './WorkoutGenerator.scss';\nimport {\n  Box,\n  Button as GrommetButton,\n  Grid,\n  TextInput\n} from 'grommet';\n\nfunction WorkoutGenerator() {\n\n  const typeExercises = [\"Stretch\", \"Exercise\"];\n  const targetExercises = [\"Core\", \"Legs\", \"Arms\"];\n\n  const [type, setType] = useState([]);\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  const [targets, setTarget] = useState([]);\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n\n  return (\n    <div className=\"workout-generator\">\n      <h2>Generate Workout</h2>\n\n      <div className=\"workout-generator-wrapper\">\n        <form autoComplete=\"off\">\n          <select id=\"workoutType\" className=\"inputType\"  name=\"workoutType\">\n            {type.map(item =>\n              <option key={item.id} value={item.name}>{item.name}</option>\n            )}\n          </select>\n          <select id=\"workoutTarget\" className=\"inputTarget\" name=\"workoutTarget\">\n            {targets.map(item =>\n              <option key={item.id} value={item.name}>{item.name}</option>\n            )}\n          </select>\n          <input type=\"reps\" id=\"workoutTiming\" className=\"inputTiming\" name=\"workoutTiming\" placeholder=\"Reps\" />\n        </form> \n\n        <div>\n          <h2>Add Exercise</h2>\n          <Grid\n            fill\n            columns={['small', 'xsmall', 'small', 'xsmall', 'xsmall']}\n            rows={['flex']}\n            gap=\"small\"\n          >\n              <TextInput\n                placeholder=\"Exercise Type\"\n                // value={exerciseTypeInput}\n                // onSelect={event => setExerciseTypeInput(event.suggestion)}\n                suggestions={typeExercises}\n                className=\"add-workout-cell\"\n              />        \n              <TextInput\n                placeholder=\"Exercise Target\"\n                // value={exerciseTargetInput}\n                // onSelect={event => setExerciseTargetInput(event.suggestion)}\n                suggestions={targetExercises}\n                className=\"add-workout-cell\"\n              />\n              <TextInput \n                placeholder=\"Reps\" \n                // value={exerciseTimingInput}\n                // onChange={event => setExerciseTimingInput(event.target.value)}\n                className=\"add-workout-cell\" \n              />\n              <GrommetButton \n                label=\"Add\" \n                // onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)} \n              />\n            </Grid>\n        </div>\n        \n        <Route render={({ history }) => (\n          <button onClick={() => { \n              let workoutType = document.querySelector(\"#workoutType\").value;\n              let workoutTarget = document.querySelector(\"#workoutTarget\").value;\n              let workoutReps = document.querySelector(\"#workoutTiming\").value;\n              if (workoutReps === \"\" ) { workoutReps = \"12\" }\n\n              history.push( {\n                pathname: '/start',\n                state: { workoutType: workoutType, workoutTarget: workoutTarget, workoutReps: workoutReps }\n              });\n            }} >\n            Start Workout\n          </button>\n        )} />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}