{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, CheckBox, Grid, Layer, List, Text } from 'grommet';\nimport { Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet checkedNum = 0;\nlet inspirationalQuotes = [\"Bravo!\", \"You did it!\", \"You did it! Treat yo-self (but make sure it's healthy)\", \"Brava, Brava, Bravissima!\"];\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": \"0\",\n      \"checked\": false\n    };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n\n  console.log(\"before\", workoutArray);\n  workoutArray.forEach(k => {\n    if (workoutArray[k - 1]) console.log(workoutArray.indexOf(workoutArray[k - 1].id));\n\n    if (workoutArray[k - 1] && workoutArray[k].count === \"0\") {\n      workoutArray.splice(workoutArray.indexOf(workoutArray[k - 1]), 1);\n    }\n  });\n  console.log(\"filter\", workoutArray.filter(count => count != 0));\n}\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const {\n    workoutType,\n    workoutTarget,\n    workoutReps\n  } = state;\n  const [query, setQuery] = useState([]);\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n  let [showLayer, setShowLayer] = useState(false);\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n  randomizeQuery(query, workoutArray, workoutReps);\n\n  function setChecked(event, workoutArray) {\n    if (event) {\n      checkedNum++;\n    } else {\n      checkedNum--;\n    }\n\n    if (checkedNum === workoutArray.length) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    direction: \"row-responsive\",\n    justify: \"center\",\n    align: \"center\",\n    pad: \"xlarge\",\n    background: \"dark-2\",\n    gap: \"medium\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      width: {\n        width: \"600px\",\n        min: \"600px\",\n        max: \"600px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(List, {\n        data: workoutArray.filter(count => count != 0),\n        primaryKey: \"name\",\n        secondaryKey: \"count\",\n        action: item => /*#__PURE__*/_jsxDEV(CheckBox, {\n          onChange: event => setChecked(event.target.checked, workoutArray, showLayer)\n        }, \"id\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, \"id\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), showLayer && /*#__PURE__*/_jsxDEV(Layer, {\n      full: true,\n      animation: \"fadeIn\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        fill: true,\n        background: \"light-4\",\n        align: \"center\",\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          size: \"large\",\n          children: inspirationalQuotes[Math.floor(Math.random() * inspirationalQuotes.length)]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          render: ({\n            history\n          }) => /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: () => {\n              setShowLayer(false);\n              history.push({\n                pathname: '/workout',\n                state: inspirationalQuotes\n              });\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"iM+XlsJ0dTnQt0xASvfHNqy91mA=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","Box","CheckBox","Grid","Layer","List","Text","Route","checkedNum","inspirationalQuotes","randomizeQuery","query","workoutArray","workoutReps","j","length","i","randomNumber","Math","floor","random","count","console","log","forEach","k","indexOf","id","splice","filter","Workout","props","state","workoutType","workoutTarget","setQuery","url","showLayer","setShowLayer","fetch","then","response","json","setChecked","event","width","min","max","item","target","checked","history","push","pathname"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, CheckBox, Grid, Layer, List, Text } from 'grommet';\nimport { Route } from 'react-router-dom';\n\nlet checkedNum = 0;\nlet inspirationalQuotes = [\n  \"Bravo!\",\n  \"You did it!\",\n  \"You did it! Treat yo-self (but make sure it's healthy)\",\n  \"Brava, Brava, Bravissima!\"\n]\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": \"0\", \"checked\": false };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n\n  console.log(\"before\", workoutArray);\n\n  workoutArray.forEach(k => {\n    if(workoutArray[k-1]) console.log(workoutArray.indexOf(workoutArray[k-1].id));\n    if(workoutArray[k-1] && workoutArray[k].count === \"0\") {\n      workoutArray.splice(workoutArray.indexOf(workoutArray[k-1]), 1);\n    }\n  }); \n\n  console.log(\"filter\", workoutArray.filter(count => count != 0));\n\n}\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const {workoutType, workoutTarget, workoutReps } = state;\n  const [query, setQuery] = useState([]);\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n  let [showLayer, setShowLayer] = useState(false);\n\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  randomizeQuery(query, workoutArray, workoutReps);\n\n  function setChecked(event, workoutArray) {\n    if (event) { checkedNum++ } else { checkedNum-- }\n    if (checkedNum === workoutArray.length ) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  return (\n    <Box\n      direction=\"row-responsive\"\n      justify=\"center\"\n      align=\"center\"\n      pad=\"xlarge\"\n      background=\"dark-2\"\n      gap=\"medium\"\n    >\n      <Grid\n          width= {{\n            width: \"600px\",\n            min: \"600px\",\n            max: \"600px\",\n          }}\n      >\n        <List\n          data={ workoutArray.filter(count => count != 0) }\n          key=\"id\"\n          primaryKey=\"name\"\n          secondaryKey=\"count\"\n          action={(item) => (\n            <CheckBox \n              key=\"id\"\n              onChange={(event) => setChecked(event.target.checked, workoutArray, showLayer)}\n            />\n          )}\n        />\n      </Grid>\n      {showLayer && (\n        <Layer full animation=\"fadeIn\">\n          <Box fill background=\"light-4\" align=\"center\" justify=\"center\">\n            <Text\n              size=\"large\"\n            >\n              { inspirationalQuotes[Math.floor(Math.random() * (inspirationalQuotes.length))] }\n            </Text>\n            <Route render={({ history }) => (\n              <p onClick={() => { \n                setShowLayer(false)\n\n                history.push( {\n                  pathname: '/workout',\n                  state: inspirationalQuotes\n                });\n\n                }} >\n                ×\n              </p>\n            )} />\n          </Box>\n        </Layer>\n      )}\n    </Box>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}