{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Workout.scss';\nimport CompleteMessage from './CompleteMessage.js';\nimport { CheckBox, List } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction randomizeQuery(query) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": \"0\"\n    };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n}\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const {\n    workoutType,\n    workoutTarget,\n    workoutReps\n  } = state;\n  const [query, setQuery] = useState([]);\n  let workoutArray = [];\n  let checkedArray = [];\n  let checkboxArray = document.getElementsByClassName(\"checkbox-item\");\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n  randomizeQuery();\n\n  function workoutChecked(workoutId) {\n    if (checkedArray.indexOf(workoutId) === -1) {\n      checkedArray.push(workoutId);\n    } else {\n      checkedArray.splice((checkedArray.indexOf(workoutId), 1));\n    }\n\n    console.log(\"! \" + checkboxArray.length + \" \" + checkedArray.length + \" \" + checkedArray);\n\n    if (checkedArray.length === checkboxArray.length) {\n      console.log(\"complete!\");\n      let completeMessage = document.getElementById(\"complete-message\");\n      completeMessage.style.left = \"0\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        data: workoutArray,\n        primaryKey: \"name\",\n        secondaryKey: \"count\",\n        action: item => /*#__PURE__*/_jsxDEV(CheckBox, {\n          onChange: workoutChecked(item.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, \"id\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CompleteMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"kvpqPid8/VwZ4oiPdvje8XuisHk=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","CompleteMessage","CheckBox","List","randomizeQuery","query","j","length","workoutArray","i","workoutReps","randomNumber","Math","floor","random","count","Workout","props","state","workoutType","workoutTarget","setQuery","checkedArray","checkboxArray","document","getElementsByClassName","url","fetch","then","response","json","workoutChecked","workoutId","indexOf","push","splice","console","log","completeMessage","getElementById","style","left","item","name"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Workout.scss';\nimport CompleteMessage from './CompleteMessage.js';\nimport {\n  CheckBox,\n  List\n} from 'grommet';\n\nfunction randomizeQuery(query, ) {\n\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": \"0\"};\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  } \n}\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const {workoutType, workoutTarget, workoutReps } = state;\n  const [query, setQuery] = useState([]);\n  let workoutArray = [];\n  let checkedArray = [];\n  let checkboxArray = document.getElementsByClassName(\"checkbox-item\");\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  randomizeQuery();\n\n  function workoutChecked(workoutId) {\n    if(checkedArray.indexOf(workoutId) === -1 ) {\n      checkedArray.push(workoutId);\n    } else {\n      checkedArray.splice((checkedArray.indexOf(workoutId), 1));\n    }\n    console.log(\"! \" + checkboxArray.length + \" \" + checkedArray.length + \" \" + checkedArray);\n\n    if (checkedArray.length === checkboxArray.length) {\n      console.log(\"complete!\");\n      let completeMessage = document.getElementById(\"complete-message\");\n      completeMessage.style.left = \"0\";\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <List\n          data={ workoutArray }\n          key=\"id\"\n          primaryKey=\"name\"\n          secondaryKey=\"count\"\n          action={(item) => (\n            <CheckBox \n              onChange={workoutChecked( item.name )} />\n          )}\n        />\n      </div>\n      <div>{ <CompleteMessage /> }</div>\n    </div>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}