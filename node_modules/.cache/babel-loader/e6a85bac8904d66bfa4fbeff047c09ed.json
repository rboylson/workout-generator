{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route, Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Box, Button, Grid, Select, Text, TextInput, ThemeContext } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkoutGenerator() {\n  _s();\n\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  let typeExercises = [];\n  let targetExercises = [];\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/list\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          size: \"large\",\n          children: \"\\u2699\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pad: {\n        horizontal: 'small',\n        vertical: 'medium'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"large\",\n        textAlign: \"center\",\n        margin: \"large\",\n        children: \"Generate Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThemeContext.Extend, {\n        value: {\n          grid: {\n            extend: () => `\n                   @media screen and (max-width: 930px) {\n                    flex-direction: column;\n                    display: flex;\n                    max-width: 300px;\n                    margin: 0 auto;\n                   }\n                `\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          columns: ['medium', 'medium', 'xsmall', 'small'],\n          justifyContent: \"center\",\n          gap: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Exercise Type\",\n            multiple: true,\n            messages: {\n              multiple: \"Multiple\"\n            },\n            closeOnChange: false,\n            options: typeExercises,\n            onChange: event => setWorkoutTypeInput(event.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            className: \"workout-select\",\n            placeholder: \"Exercise Target\",\n            options: targetExercises,\n            onChange: event => setWorkoutTargetInput(event.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Reps\",\n            value: workoutRepsInput,\n            onChange: event => setWorkoutRepsInput(event.target.value),\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"NkwscM4D2eYUtLcycUwASnr1GVc=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","Link","useEffect","useState","Box","Button","Grid","Select","Text","TextInput","ThemeContext","WorkoutGenerator","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","typeExercises","targetExercises","fetch","then","response","json","map","element","index","name","horizontal","vertical","grid","extend","multiple","event","value","target"],"mappings":"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","sourcesContent":["import { Route, Link } from 'react-router-dom'\nimport { useEffect, useState } from 'react';\nimport { Box, Button, Grid, Select, Text, TextInput, ThemeContext } from 'grommet';\n\n\nfunction WorkoutGenerator() {\n  \n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  let typeExercises = [];\n  let targetExercises = [];\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n\n  return (\n    <div>\n      <Box>\n        <Link to='/list'>\n          <Text size=\"large\">âš™</Text>\n        </Link>\n      </Box> \n\n      <Box pad= {{ horizontal: 'small', vertical: 'medium' }} >\n        \n        <Text \n          size=\"large\"\n          textAlign=\"center\"\n          margin=\"large\" >\n          Generate Workout\n        </Text>\n\n        <ThemeContext.Extend\n            value={{\n              grid: {\n                extend: () => `\n                   @media screen and (max-width: 930px) {\n                    flex-direction: column;\n                    display: flex;\n                    max-width: 300px;\n                    margin: 0 auto;\n                   }\n                `,\n              },\n            }}\n          >\n          <Grid\n            columns={['medium', 'medium', 'xsmall', 'small']}\n            justifyContent=\"center\"\n            gap=\"small\" >\n\n              <Select\n                placeholder=\"Exercise Type\"\n                multiple\n                messages={{ multiple: \"Multiple\" }}\n                closeOnChange={false}\n                options={typeExercises}\n                onChange={event => setWorkoutTypeInput(event.value)}\n              /> \n\n              <Select\n                className=\"workout-select\"\n                placeholder=\"Exercise Target\"\n                options={targetExercises}\n                onChange={event => setWorkoutTargetInput(event.value)}\n              />      \n\n              <TextInput \n                placeholder=\"Reps\" \n                value={workoutRepsInput}\n                onChange={event => setWorkoutRepsInput(event.target.value)}\n                type=\"number\"\n              />\n          </Grid>\n        </ThemeContext.Extend>\n      </Box>\n    </div>\n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}