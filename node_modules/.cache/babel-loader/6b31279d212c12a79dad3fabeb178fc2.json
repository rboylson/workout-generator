{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button as GrommetButton, Grid, Grommet, Header, Nav, ResponsiveContext, Select, Text, TextInput } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customTheme = deepMerge(grommet, {\n  global: {\n    input: {\n      padding: {\n        horizontal: 'small',\n        vertical: 'medium'\n      }\n    }\n  },\n  textInput: {\n    extend: () => `\n      // background: #fff;\n    `,\n    container: {\n      extend: () => `\n        display: flex;\n        flex-flow: column;\n        justify-content: center;\n        border-radius: 10px;\n      `\n    },\n    placeholder: {\n      extend: () => `\n        width: 100%;\n        color: #1e1a11;\n      `\n    },\n    suggestions: {\n      extend: () => `\n        background: #c9c19f;\n        color: #3d3522;\n        li {\n          border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n        }\n      `\n    }\n  }\n});\n\nfunction setWorkoutTypeInputOptions(optionss) {// console.log(optionss);\n}\n\nfunction WorkoutGenerator() {\n  _s();\n\n  let options = [\"Stretch\", \"Exercise\"];\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  const size = useContext(ResponsiveContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grommet, {\n      full: true,\n      theme: customTheme,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        justify: \"end\",\n        children: /*#__PURE__*/_jsxDEV(Nav, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/list\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              size: \"large\",\n              children: \"\\u2699\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        pad: \"xlarge\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          size: \"large\",\n          textAlign: \"center\",\n          margin: \"medium\",\n          children: \"Generate Workout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          fill: true,\n          columns: ['medium', 'medium', 'xsmall', 'small'],\n          justifyContent: \"center\",\n          gap: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Exercise Type\",\n            multiple: true,\n            closeOnChange: false,\n            options: options // onChange={({ value: nextValue }) => setValue(nextValue)}\n            // value={workoutTypeInput}\n            ,\n            onChange: event => setWorkoutTypeInput(event.value) // onChange={event => setWorkoutTypeInputOptions(event)}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Exercise Target\",\n            value: workoutTargetInput,\n            onSelect: event => setWorkoutTargetInput(event.suggestion),\n            suggestions: targetExercises\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            placeholder: \"Reps\",\n            value: workoutRepsInput,\n            onChange: event => setWorkoutRepsInput(event.target.value),\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            render: ({\n              history\n            }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n              label: \"Start Workout\",\n              onClick: () => {\n                history.push({\n                  pathname: '/start',\n                  state: {\n                    workoutType: workoutTypeInput,\n                    workoutTarget: workoutTargetInput,\n                    workoutReps: workoutRepsInput\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"mPtrdfk12r68gz8OjzailV5w/10=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","useContext","Link","Box","Button","GrommetButton","Grid","Grommet","Header","Nav","ResponsiveContext","Select","Text","TextInput","grommet","deepMerge","customTheme","global","input","padding","horizontal","vertical","textInput","extend","container","placeholder","suggestions","setWorkoutTypeInputOptions","optionss","WorkoutGenerator","options","typeExercises","targetExercises","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","fetch","then","response","json","map","element","index","name","size","event","value","suggestion","target","history","push","pathname","state","workoutType","workoutTarget","workoutReps"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button as GrommetButton, Grid, Grommet, Header, Nav, ResponsiveContext, Select, Text, TextInput } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\n\nconst customTheme = deepMerge(grommet, {\n  global: {\n    input: {\n      padding: {\n        horizontal: 'small',\n        vertical: 'medium',\n      },\n    },\n  },\n  textInput: {\n    extend: () => `\n      // background: #fff;\n    `,\n    container: {\n      extend: () => `\n        display: flex;\n        flex-flow: column;\n        justify-content: center;\n        border-radius: 10px;\n      `,\n    },\n    placeholder: {\n      extend: () => `\n        width: 100%;\n        color: #1e1a11;\n      `,\n    },\n    suggestions: {\n      extend: () => `\n        background: #c9c19f;\n        color: #3d3522;\n        li {\n          border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n        }\n      `,\n    },\n  },\n});\n\nfunction setWorkoutTypeInputOptions(optionss) {\n  // console.log(optionss);\n}\n\nfunction WorkoutGenerator() {\n\n  let options = [\"Stretch\", \"Exercise\"];\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  const size = useContext(ResponsiveContext);\n\n\n  return (\n    <div>\n      <Grommet full theme={customTheme}>\n\n        <Header justify=\"end\">\n          <Nav>\n            <Link to='/list'>\n              <Text size=\"large\">⚙</Text>\n            </Link>\n          </Nav>\n        </Header>      \n        <Box pad=\"xlarge\" >\n          <Text\n            size=\"large\"\n            textAlign=\"center\"\n            margin=\"medium\" >\n            Generate Workout\n          </Text>\n          <Grid\n            fill\n            columns={['medium', 'medium', 'xsmall', 'small']}\n            justifyContent=\"center\"\n            gap=\"small\" >\n            <Select\n              placeholder=\"Exercise Type\"\n              multiple\n              closeOnChange={false}\n              options={options}\n              // onChange={({ value: nextValue }) => setValue(nextValue)}\n              // value={workoutTypeInput}\n              onChange={event => setWorkoutTypeInput(event.value)}\n              // onChange={event => setWorkoutTypeInputOptions(event)}\n            />        \n            <TextInput\n              placeholder=\"Exercise Target\"\n              value={workoutTargetInput}\n              onSelect={event => setWorkoutTargetInput(event.suggestion)}\n              suggestions={targetExercises}\n            />\n            <TextInput \n              placeholder=\"Reps\" \n              value={workoutRepsInput}\n              onChange={event => setWorkoutRepsInput(event.target.value)}\n              type=\"number\"\n            />\n            <Route render={({ history }) => (\n              <GrommetButton\n                label=\"Start Workout\" \n                onClick={() => { \n                    history.push( {\n                      pathname: '/start',\n                      state: { \n                        workoutType: workoutTypeInput, \n                        workoutTarget: workoutTargetInput, \n                        workoutReps: workoutRepsInput }\n                    });\n                  }} >\n                </GrommetButton>\n              )} \n            />\n          </Grid>\n        </Box>\n      </Grommet>\n    </div>\n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}