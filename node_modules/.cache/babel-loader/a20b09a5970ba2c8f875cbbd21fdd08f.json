{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/ExerciseGrid.js\",\n    _s = $RefreshSig$();\n\nimport './ExerciseGrid.scss';\nimport { useEffect, useState } from 'react';\nimport DataGrid, { SortableHeaderCell } from 'react-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExerciseGrid() {\n  _s();\n\n  const columns = [{\n    key: 'id',\n    name: 'ID'\n  }, {\n    key: 'name',\n    name: 'Name'\n  }, {\n    key: 'type',\n    name: 'Type'\n  }, {\n    key: 'timing',\n    name: 'Timing'\n  }, {\n    key: 'target',\n    name: 'Target'\n  }];\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/workouts').then(response => response.json()).then(setList);\n  }, []);\n\n  function rowKeyGetter(row) {\n    console.log(row.id);\n  }\n\n  state = {\n    rows\n  };\n\n  onGridRowsUpdated = ({\n    fromRow,\n    toRow,\n    updated\n  }) => {\n    this.setState(state => {\n      const rows = state.rows.slice();\n\n      for (let i = fromRow; i <= toRow; i++) {\n        rows[i] = { ...rows[i],\n          ...updated\n        };\n      }\n\n      return {\n        rows\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ExerciseGrid\",\n    children: [/*#__PURE__*/_jsxDEV(SortableHeaderCell, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: list // rowGetter={i => this.state.rows[i]}\n      ,\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      enableCellSelect: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExerciseGrid, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c = ExerciseGrid;\nexport default ExerciseGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExerciseGrid\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/ExerciseGrid.js"],"names":["useEffect","useState","DataGrid","SortableHeaderCell","ExerciseGrid","columns","key","name","list","setList","fetch","then","response","json","rowKeyGetter","row","console","log","id","state","rows","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","i"],"mappings":";;;AAAA,OAAO,qBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,IAAmBC,kBAAnB,QAA8C,iBAA9C;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEtB,QAAMC,OAAO,GAAG,CACd;AAAEC,IAAAA,GAAG,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GADc,EAEd;AAAED,IAAAA,GAAG,EAAE,MAAP;AAAeC,IAAAA,IAAI,EAAE;AAArB,GAFc,EAGd;AAAED,IAAAA,GAAG,EAAE,MAAP;AAAeC,IAAAA,IAAI,EAAE;AAArB,GAHc,EAId;AAAED,IAAAA,GAAG,EAAE,QAAP;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GAJc,EAKd;AAAED,IAAAA,GAAG,EAAE,QAAP;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GALc,CAAhB;AAQA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACZU,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQF,OAFR;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,WAASK,YAAT,CAAsBC,GAAtB,EAAgC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,EAAhB;AACD;;AACDC,EAAAA,KAAK,GAAG;AAAEC,IAAAA;AAAF,GAAR;;AAEAC,EAAAA,iBAAiB,GAAG,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAAiC;AACnD,SAAKC,QAAL,CAAcN,KAAK,IAAI;AACrB,YAAMC,IAAI,GAAGD,KAAK,CAACC,IAAN,CAAWM,KAAX,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAGL,OAAb,EAAsBK,CAAC,IAAIJ,KAA3B,EAAkCI,CAAC,EAAnC,EAAuC;AACrCP,QAAAA,IAAI,CAACO,CAAD,CAAJ,GAAU,EAAE,GAAGP,IAAI,CAACO,CAAD,CAAT;AAAc,aAAGH;AAAjB,SAAV;AACD;;AACD,aAAO;AAAEJ,QAAAA;AAAF,OAAP;AACD,KAND;AAOD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGK,QAAC,QAAD;AACC,MAAA,OAAO,EAAEf,OADV;AAEC,MAAA,IAAI,EAAEG,IAFP,CAGC;AAHD;AAIC,MAAA,iBAAiB,EAAE,KAAKa,iBAJzB;AAKC,MAAA,gBAAgB,EAAE;AALnB;AAAA;AAAA;AAAA;AAAA,YAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA9CQjB,Y;;KAAAA,Y;AAgDT,eAAeA,YAAf","sourcesContent":["import './ExerciseGrid.scss';\nimport { useEffect, useState } from 'react';\nimport DataGrid, { SortableHeaderCell }  from 'react-data-grid';\n\nfunction ExerciseGrid() {\n\n  const columns = [\n    { key: 'id', name: 'ID' },\n    { key: 'name', name: 'Name' },\n    { key: 'type', name: 'Type' },\n    { key: 'timing', name: 'Timing' },\n    { key: 'target', name: 'Target' }\n  ];\n\n  const [list, setList] = useState([]);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/workouts')\n      .then(response => response.json())\n      .then(setList);\n  }, []);\n\n  function rowKeyGetter(row: Row) {\n    console.log(row.id);\n  }\n  state = { rows };\n\n  onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    this.setState(state => {\n      const rows = state.rows.slice();\n      for (let i = fromRow; i <= toRow; i++) {\n        rows[i] = { ...rows[i], ...updated };\n      }\n      return { rows };\n    });\n  };\n  \n  return (\n    <div className=\"ExerciseGrid\">\n      <SortableHeaderCell />\n\n         <DataGrid \n          columns={columns} \n          rows={list} \n          // rowGetter={i => this.state.rows[i]}\n          onGridRowsUpdated={this.onGridRowsUpdated}\n          enableCellSelect={true}\n        />\n    </div>\n  );\n}\n\nexport default ExerciseGrid;\n"]},"metadata":{},"sourceType":"module"}