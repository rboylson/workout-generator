{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport './WorkoutGenerator.scss';\nimport { Button as GrommetButton, Grid, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkoutGenerator() {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  console.log(workoutTypeInput, workoutTargetInput, workoutRepsInput);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      fill: true,\n      columns: ['small', 'small', 'xsmall', 'small'],\n      rows: ['flex'],\n      gap: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Type\",\n        value: workoutTypeInput,\n        onSelect: event => setWorkoutTypeInput(event.suggestion),\n        suggestions: typeExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Target\",\n        value: workoutTargetInput,\n        onSelect: event => setWorkoutTargetInput(event.suggestion),\n        suggestions: targetExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Reps\" // value={workoutRepsInput}\n        ,\n        onChange: event => setWorkoutRepsInput(event.target.value),\n        className: \"add-workout-cell\",\n        defaultSuggestion: \"12\",\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        render: ({\n          history\n        }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n          label: \"Start Workout\",\n          onClick: () => {\n            history.push({\n              pathname: '/start',\n              state: {\n                workoutType: workoutTypeInput,\n                workoutTarget: workoutTargetInput,\n                workoutReps: workoutRepsInput\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"NkwscM4D2eYUtLcycUwASnr1GVc=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","Button","GrommetButton","Grid","TextInput","WorkoutGenerator","typeExercises","targetExercises","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","console","log","fetch","then","response","json","map","element","index","name","event","suggestion","target","value","history","push","pathname","state","workoutType","workoutTarget","workoutReps"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState } from 'react';\nimport './WorkoutGenerator.scss';\nimport {\n  Button as GrommetButton,\n  Grid,\n  TextInput\n} from 'grommet';\n\nfunction WorkoutGenerator() {\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n\n  console.log(workoutTypeInput, workoutTargetInput, workoutRepsInput);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  return (\n    <div className=\"workout-generator\">\n      <h2>Generate Workout</h2>\n      <Grid\n        fill\n        columns={['small', 'small', 'xsmall', 'small']}\n        rows={['flex']}\n        gap=\"small\"\n      >\n          <TextInput\n            placeholder=\"Exercise Type\"\n            value={workoutTypeInput}\n            onSelect={event => setWorkoutTypeInput(event.suggestion)}\n            suggestions={typeExercises}\n            className=\"add-workout-cell\"\n          />        \n          <TextInput\n            placeholder=\"Exercise Target\"\n            value={workoutTargetInput}\n            onSelect={event => setWorkoutTargetInput(event.suggestion)}\n            suggestions={targetExercises}\n            className=\"add-workout-cell\"\n          />\n          <TextInput \n            placeholder=\"Reps\" \n            // value={workoutRepsInput}\n            onChange={event => setWorkoutRepsInput(event.target.value)}\n            className=\"add-workout-cell\" \n            defaultSuggestion = '12'\n            type=\"number\"\n          />\n          \n          <Route render={({ history }) => (\n            <GrommetButton\n              label=\"Start Workout\" \n              onClick={() => { \n                  history.push( {\n                    pathname: '/start',\n                    state: { \n                      workoutType: workoutTypeInput, \n                      workoutTarget: workoutTargetInput, \n                      workoutReps: workoutRepsInput }\n                  });\n                }} >\n              </GrommetButton>\n            )} \n          />\n        </Grid>\n\n      </div>\n      \n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}