{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Button as GrommetButton, CheckBox, Layer, List, Text } from 'grommet';\nimport { Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet checkedNum = 0;\nlet inspirationalQuotes = [\"Bravo!\", \"You did it!\", \"You did it! Treat yo-self (but make sure it's healthy)\", \"Brava, Brava, Bravissima!\"];\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": 0,\n      \"checked\": false\n    };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n}\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const [query, setQuery] = useState([]);\n  const {\n    workoutType,\n    workoutTarget,\n    workoutReps\n  } = state;\n  let workoutTypeJson = \"\";\n  let workoutTargetJson = \"Arms\";\n\n  for (var m = 0; m < state.workoutType.length; m++) {\n    workoutTypeJson += \"type=\" + workoutType[m] + \"&\";\n  }\n\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?${workoutTypeJson}`;\n  let [showLayer, setShowLayer] = useState(false);\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n  randomizeQuery(query, workoutArray, workoutReps);\n  console.log(workoutArray);\n\n  function setChecked(event, workoutArray) {\n    if (event) {\n      checkedNum++;\n    } else {\n      checkedNum--;\n    }\n\n    if (checkedNum === workoutArray.filter(checkCount).length) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  function checkCount(item) {\n    return item.count > 0;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      pad: \"xlarge\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        pad: \"large\",\n        data: workoutArray.filter(checkCount),\n        primaryKey: item => /*#__PURE__*/_jsxDEV(Text, {\n          size: \"xlarge\",\n          children: [item.name, \": \", item.timing]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 35\n        }, this),\n        secondaryKey: item => /*#__PURE__*/_jsxDEV(Text, {\n          size: \"large\",\n          children: [\"Repeat \", item.count, \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 37\n        }, this),\n        action: item => /*#__PURE__*/_jsxDEV(CheckBox, {\n          pad: \"medium\",\n          onChange: event => setChecked(event.target.checked, workoutArray, showLayer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), showLayer && /*#__PURE__*/_jsxDEV(Layer, {\n      full: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        fill: true,\n        background: \"backgroundLight\",\n        align: \"center\",\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"large\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            size: \"xlarge\",\n            textAlign: \"center\",\n            margin: {\n              bottom: \"20px\"\n            },\n            children: inspirationalQuotes[Math.floor(Math.random() * inspirationalQuotes.length)]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          render: ({\n            history\n          }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n            label: \"Finish Workout\",\n            margin: {\n              top: \"10px\",\n              bottom: \"90px\"\n            },\n            border: {\n              radius: \"50px\"\n            },\n            size: \"large\",\n            onClick: () => {\n              setShowLayer(false);\n              history.push({\n                pathname: '/workout',\n                state: inspirationalQuotes\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"iM+XlsJ0dTnQt0xASvfHNqy91mA=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","Box","Button","GrommetButton","CheckBox","Layer","List","Text","Route","checkedNum","inspirationalQuotes","randomizeQuery","query","workoutArray","workoutReps","j","length","i","randomNumber","Math","floor","random","count","Workout","props","state","setQuery","workoutType","workoutTarget","workoutTypeJson","workoutTargetJson","m","url","showLayer","setShowLayer","fetch","then","response","json","console","log","setChecked","event","filter","checkCount","item","name","timing","target","checked","bottom","history","top","radius","push","pathname"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Button as GrommetButton, CheckBox, Layer, List, Text } from 'grommet';\nimport { Route } from 'react-router-dom';\n\nlet checkedNum = 0;\nlet inspirationalQuotes = [\n  \"Bravo!\",\n  \"You did it!\",\n  \"You did it! Treat yo-self (but make sure it's healthy)\",\n  \"Brava, Brava, Bravissima!\"\n]\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": 0, \"checked\": false };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }  \n}\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const [query, setQuery] = useState([]);\n  const {workoutType, workoutTarget, workoutReps } = state;\n  let workoutTypeJson = \"\";\n  let workoutTargetJson = \"Arms\";\n\n  for (var m = 0; m < state.workoutType.length; m++) {\n    workoutTypeJson += \"type=\" + workoutType[m] + \"&\";\n  }\n\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?${workoutTypeJson}`;\n  let [showLayer, setShowLayer] = useState(false);\n\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  randomizeQuery(query, workoutArray, workoutReps);\n\n  console.log(workoutArray);\n\n\n  function setChecked(event, workoutArray) {\n    if (event) { checkedNum++ } else { checkedNum-- }\n    if (checkedNum === workoutArray.filter(checkCount).length ) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  function checkCount(item) {\n    return item.count > 0;\n  }\n\n  return (\n    <div>\n      <Box\n        justify=\"center\"\n        pad=\"xlarge\"\n      >\n        <List\n          pad=\"large\"\n          data={ workoutArray.filter(checkCount) }\n          primaryKey = { item => (<Text size=\"xlarge\">{item.name}: {item.timing}</Text>) }\n          secondaryKey = { item => (<Text size=\"large\">Repeat {item.count}x</Text>) }\n          action={(item) => (\n            <CheckBox \n              pad=\"medium\"\n              onChange={(event) => setChecked(event.target.checked, workoutArray, showLayer)}\n            />\n          )}\n        />\n      </Box>\n\n      {showLayer && (\n        <Layer full>\n          <Box \n            fill \n            background=\"backgroundLight\" \n            align=\"center\" \n            justify=\"center\" >\n            <Box width=\"large\">\n              <Text\n                size=\"xlarge\"\n                textAlign=\"center\"\n                margin={{\n                  bottom: \"20px\"\n                }}>\n                { inspirationalQuotes[Math.floor(Math.random() * (inspirationalQuotes.length))] }\n              </Text>\n            </Box>\n            <Route render={({ history }) => (\n              <GrommetButton \n                label=\"Finish Workout\"\n                margin={{\n                  top: \"10px\",\n                  bottom: \"90px\",\n                }}\n                border={{\n                  radius: \"50px\",\n                }}\n                size=\"large\"\n                onClick={() => { \n                  setShowLayer(false)\n                  history.push( {\n                    pathname: '/workout',\n                    state: inspirationalQuotes\n                  });\n                }} >\n              </GrommetButton>\n            )} />\n          </Box>\n        </Layer>\n      )}\n    </div>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}