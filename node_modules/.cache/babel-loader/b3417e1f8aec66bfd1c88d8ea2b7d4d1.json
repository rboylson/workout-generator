{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Button as GrommetButton, CheckBox, Grid, Layer, List, Text } from 'grommet';\nimport { Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet checkedNum = 0;\nlet inspirationalQuotes = [\"Bravo!\", \"You did it!\", \"You did it! Treat yo-self (but make sure it's healthy)\", \"Brava, Brava, Bravissima!\"];\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": 0,\n      \"checked\": false\n    };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n}\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const [query, setQuery] = useState([]);\n  const {\n    workoutType,\n    workoutTarget,\n    workoutReps\n  } = state;\n  let workoutTypeJson = \"\";\n\n  for (var m = 0; m < state.workoutType.length; m++) {\n    workoutTypeJson += \"type=\" + workoutType[m] + \"&\";\n  }\n\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?${workoutTypeJson}target=${workoutTarget}`;\n  let [showLayer, setShowLayer] = useState(false);\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n  randomizeQuery(query, workoutArray, workoutReps);\n\n  function setChecked(event, workoutArray) {\n    if (event) {\n      checkedNum++;\n    } else {\n      checkedNum--;\n    }\n\n    if (checkedNum === workoutArray.filter(checkCount).length) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  function checkCount(item) {\n    return item.count > 0;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      direction: \"row-responsive\",\n      justify: \"center\",\n      align: \"center\",\n      pad: \"xlarge\",\n      gap: \"medium\",\n      children: /*#__PURE__*/_jsxDEV(Grid // width= {{\n      //   width: \"600px\",\n      //   min: \"600px\",\n      //   max: \"600px\",\n      // }}\n      , {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          pad: \"large\",\n          data: workoutArray.filter(checkCount),\n          primaryKey: item => /*#__PURE__*/_jsxDEV(Text, {\n            size: \"xlarge\",\n            children: [item.name, \": \", item.timing]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }, this),\n          secondaryKey: item => /*#__PURE__*/_jsxDEV(Text, {\n            size: \"large\",\n            children: [\"Repeat \", item.count, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 39\n          }, this),\n          action: item => /*#__PURE__*/_jsxDEV(CheckBox, {\n            pad: \"medium\",\n            onChange: event => setChecked(event.target.checked, workoutArray, showLayer)\n          }, \"id\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)\n        }, workoutArray[index], false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, \"id\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, \"id\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"iM+XlsJ0dTnQt0xASvfHNqy91mA=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","Box","Button","GrommetButton","CheckBox","Grid","Layer","List","Text","Route","checkedNum","inspirationalQuotes","randomizeQuery","query","workoutArray","workoutReps","j","length","i","randomNumber","Math","floor","random","count","Workout","props","state","setQuery","workoutType","workoutTarget","workoutTypeJson","m","url","showLayer","setShowLayer","fetch","then","response","json","setChecked","event","filter","checkCount","item","name","timing","target","checked","index"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box, Button as GrommetButton, CheckBox, Grid, Layer, List, Text } from 'grommet';\nimport { Route } from 'react-router-dom';\n\nlet checkedNum = 0;\nlet inspirationalQuotes = [\n  \"Bravo!\",\n  \"You did it!\",\n  \"You did it! Treat yo-self (but make sure it's healthy)\",\n  \"Brava, Brava, Bravissima!\"\n]\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": 0, \"checked\": false };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }  \n}\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const [query, setQuery] = useState([]);\n  const {workoutType, workoutTarget, workoutReps } = state;\n  let workoutTypeJson = \"\";\n\n  for (var m = 0; m < state.workoutType.length; m++) {\n    workoutTypeJson += \"type=\" + workoutType[m] + \"&\";\n  }\n\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?${workoutTypeJson}target=${workoutTarget}`;\n  let [showLayer, setShowLayer] = useState(false);\n\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  randomizeQuery(query, workoutArray, workoutReps);\n\n  function setChecked(event, workoutArray) {\n    if (event) { checkedNum++ } else { checkedNum-- }\n    if (checkedNum === workoutArray.filter(checkCount).length ) {\n      setShowLayer(!showLayer);\n    }\n  }\n\n  function checkCount(item) {\n    return item.count > 0;\n  }\n\n  return (\n    <div>\n      <Box\n        direction=\"row-responsive\"\n        justify=\"center\"\n        align=\"center\"\n        pad=\"xlarge\"\n        gap=\"medium\"\n        key=\"id\"\n      >\n        <Grid\n            // width= {{\n            //   width: \"600px\",\n            //   min: \"600px\",\n            //   max: \"600px\",\n            // }}\n            key=\"id\"\n        >\n          <List\n            pad=\"large\"\n            data={ workoutArray.filter(checkCount) }\n            key={workoutArray[index]}\n            primaryKey = { item => (<Text size=\"xlarge\">{item.name}: {item.timing}</Text>) }\n            secondaryKey = { item => (<Text size=\"large\">Repeat {item.count}x</Text>) }\n            action={(item) => (\n              <CheckBox \n                pad=\"medium\"\n                key=\"id\"\n                onChange={(event) => setChecked(event.target.checked, workoutArray, showLayer)}\n              />\n            )}\n          />\n        </Grid>\n        </Box>\n\n      {/* {showLayer && (\n        <Layer full>\n          <Box \n            fill \n            background=\"light-4\" \n            align=\"center\" \n            justify=\"center\" \n            direction=\"column\"\n          >\n            <Box width=\"medium\">\n              <Text\n                size=\"xlarge\"\n                textAlign=\"center\"\n                margin={{\n                  bottom: \"20px\"\n                }}\n              >{ inspirationalQuotes[Math.floor(Math.random() * (inspirationalQuotes.length))] }\n              </Text>\n            </Box>\n            <Route render={({ history }) => (\n              <GrommetButton \n                label=\"Finish Workout\"\n                margin={{\n                  top: \"10px\",\n                  bottom: \"90px\"\n                }}\n                size=\"large\"\n                onClick={() => { \n                setShowLayer(false)\n                history.push( {\n                  pathname: '/workout',\n                  state: inspirationalQuotes\n                });\n                }} >\n              </GrommetButton>\n            )} />\n          </Box>\n        </Layer>\n      )} */}\n    </div>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}