{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Box, Button as GrommetButton, Grid, Layer, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkoutGenerator() {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [showLayer, setShowLayer] = useState(false);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \"const [showLayer, setShowLayer] = React.useState(false);\", /*#__PURE__*/_jsxDEV(Box, {\n      pad: \"small\",\n      fill: true,\n      background: \"dark-3\",\n      align: \"center\",\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(GrommetButton, {\n        primary: true,\n        color: \"accent-3\",\n        label: \"Show\",\n        onClick: () => setShowLayer(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), showLayer && /*#__PURE__*/_jsxDEV(Layer, {\n        full: true,\n        animation: \"fadeIn\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          fill: true,\n          background: \"light-4\",\n          align: \"center\",\n          justify: \"center\",\n          children: /*#__PURE__*/_jsxDEV(GrommetButton, {\n            primary: true,\n            label: \"Close\",\n            onClick: () => setShowLayer(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      fill: true,\n      columns: ['small', 'small', 'xsmall', 'small'],\n      rows: ['flex'],\n      gap: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Type\",\n        value: workoutTypeInput,\n        onSelect: event => setWorkoutTypeInput(event.suggestion),\n        suggestions: typeExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Target\",\n        value: workoutTargetInput,\n        onSelect: event => setWorkoutTargetInput(event.suggestion),\n        suggestions: targetExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Reps\",\n        value: workoutRepsInput,\n        onChange: event => setWorkoutRepsInput(event.target.value),\n        className: \"add-workout-cell\",\n        defaultSuggestion: \"12\",\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        pad: \"small\",\n        fill: true,\n        background: \"dark-3\",\n        align: \"center\",\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(GrommetButton, {\n          primary: true,\n          color: \"accent-3\",\n          label: \"Show\",\n          onClick: () => setShowLayer(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), showLayer && /*#__PURE__*/_jsxDEV(Layer, {\n        full: true,\n        animation: \"fadeIn\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          fill: true,\n          background: \"light-4\",\n          align: \"center\",\n          justify: \"center\",\n          children: /*#__PURE__*/_jsxDEV(GrommetButton, {\n            primary: true,\n            label: \"Close\",\n            onClick: () => setShowLayer(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        render: ({\n          history\n        }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n          label: \"Start Workout\",\n          onClick: () => {\n            history.push({\n              pathname: '/start',\n              state: {\n                workoutType: workoutTypeInput,\n                workoutTarget: workoutTargetInput,\n                workoutReps: workoutRepsInput\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"qAHCFA0fn2RtCNmM//06c8e2p/E=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","Box","Button","GrommetButton","Grid","Layer","TextInput","WorkoutGenerator","typeExercises","targetExercises","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","showLayer","setShowLayer","fetch","then","response","json","map","element","index","name","event","suggestion","target","value","history","push","pathname","state","workoutType","workoutTarget","workoutReps"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState } from 'react';\nimport { Box, Button as GrommetButton, Grid, Layer, TextInput } from 'grommet';\n\nfunction WorkoutGenerator() {\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [showLayer, setShowLayer] = useState(false);\n\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  return (\n    <div className=\"workout-generator\">\n      <h2>Generate Workout</h2>\n\n      const [showLayer, setShowLayer] = React.useState(false);\n\n          <Box pad=\"small\" fill background=\"dark-3\" align=\"center\" justify=\"center\">\n            <GrommetButton\n              primary\n              color=\"accent-3\"\n              label=\"Show\"\n              onClick={() => setShowLayer(true)}\n            />\n            {showLayer && (\n              <Layer full animation=\"fadeIn\">\n                <Box fill background=\"light-4\" align=\"center\" justify=\"center\">\n                  <GrommetButton\n                    primary\n                    label=\"Close\"\n                    onClick={() => setShowLayer(false)}\n                  />\n                </Box>\n              </Layer>\n            )}\n          </Box>\n\n\n\n      <Grid\n        fill\n        columns={['small', 'small', 'xsmall', 'small']}\n        rows={['flex']}\n        gap=\"small\"\n      >\n          <TextInput\n            placeholder=\"Exercise Type\"\n            value={workoutTypeInput}\n            onSelect={event => setWorkoutTypeInput(event.suggestion)}\n            suggestions={typeExercises}\n            className=\"add-workout-cell\"\n          />        \n          <TextInput\n            placeholder=\"Exercise Target\"\n            value={workoutTargetInput}\n            onSelect={event => setWorkoutTargetInput(event.suggestion)}\n            suggestions={targetExercises}\n            className=\"add-workout-cell\"\n          />\n          <TextInput \n            placeholder=\"Reps\" \n            value={workoutRepsInput}\n            onChange={event => setWorkoutRepsInput(event.target.value)}\n            className=\"add-workout-cell\" \n            defaultSuggestion = '12'\n            type=\"number\"\n          />\n\n          <Box pad=\"small\" fill background=\"dark-3\" align=\"center\" justify=\"center\">\n            <GrommetButton\n              primary\n              color=\"accent-3\"\n              label=\"Show\"\n              onClick={() => setShowLayer(true)}\n            />\n          </Box>\n\n          {showLayer && (\n            <Layer full animation=\"fadeIn\">\n              <Box fill background=\"light-4\" align=\"center\" justify=\"center\">\n                <GrommetButton\n                  primary\n                  label=\"Close\"\n                  onClick={() => setShowLayer(false)}\n                />\n              </Box>\n            </Layer>\n          )}\n          \n          <Route render={({ history }) => (\n            <GrommetButton\n              label=\"Start Workout\" \n              onClick={() => { \n                  history.push( {\n                    pathname: '/start',\n                    state: { \n                      workoutType: workoutTypeInput, \n                      workoutTarget: workoutTargetInput, \n                      workoutReps: workoutRepsInput }\n                  });\n                }} >\n              </GrommetButton>\n            )} \n          />\n        </Grid>\n      </div>\n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}