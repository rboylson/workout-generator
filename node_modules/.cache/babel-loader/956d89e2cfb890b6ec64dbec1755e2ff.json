{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport './WorkoutGenerator.scss';\nimport { Box, Button as GrommetButton, Grid, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkoutGenerator() {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        fill: true,\n        columns: ['small', 'small', 'xsmall', 'small'],\n        rows: ['flex'],\n        gap: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Exercise Type\",\n          value: workoutTypeInput,\n          onSelect: event => setWorkoutTypeInput(event.suggestion),\n          suggestions: typeExercises,\n          className: \"add-workout-cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Exercise Target\",\n          value: workoutTargetInput,\n          onSelect: event => setWorkoutTypeInput(event.suggestion),\n          suggestions: targetExercises,\n          className: \"add-workout-cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          placeholder: \"Reps\",\n          value: workoutRepsInput,\n          onChange: event => setWorkoutRepsInput(event.target.value),\n          className: \"add-workout-cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GrommetButton, {\n          label: \"Start Workout\" // onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)} \n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      render: ({\n        history\n      }) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          let workoutType = document.querySelector(\"#workoutType\").value;\n          let workoutTarget = document.querySelector(\"#workoutTarget\").value;\n          let workoutReps = document.querySelector(\"#workoutTiming\").value;\n\n          if (workoutReps === \"\") {\n            workoutReps = \"12\";\n          }\n\n          history.push({\n            pathname: '/start',\n            state: {\n              workoutType: workoutType,\n              workoutTarget: workoutTarget,\n              workoutReps: workoutReps\n            }\n          });\n        },\n        children: \"Start Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"NkwscM4D2eYUtLcycUwASnr1GVc=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","Box","Button","GrommetButton","Grid","TextInput","WorkoutGenerator","typeExercises","targetExercises","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","fetch","then","response","json","map","element","index","name","event","suggestion","target","value","history","workoutType","document","querySelector","workoutTarget","workoutReps","push","pathname","state"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState } from 'react';\nimport './WorkoutGenerator.scss';\nimport {\n  Box,\n  Button as GrommetButton,\n  Grid,\n  TextInput\n} from 'grommet';\n\nfunction WorkoutGenerator() {\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  return (\n    <div className=\"workout-generator\">\n      <h2>Generate Workout</h2>\n\n        <div>\n          <Grid\n            fill\n            columns={['small', 'small', 'xsmall', 'small']}\n            rows={['flex']}\n            gap=\"small\"\n          >\n              <TextInput\n                placeholder=\"Exercise Type\"\n                value={workoutTypeInput}\n                onSelect={event => setWorkoutTypeInput(event.suggestion)}\n                suggestions={typeExercises}\n                className=\"add-workout-cell\"\n              />        \n              <TextInput\n                placeholder=\"Exercise Target\"\n                value={workoutTargetInput}\n                onSelect={event => setWorkoutTypeInput(event.suggestion)}\n                suggestions={targetExercises}\n                className=\"add-workout-cell\"\n              />\n              <TextInput \n                placeholder=\"Reps\" \n                value={workoutRepsInput}\n                onChange={event => setWorkoutRepsInput(event.target.value)}\n                className=\"add-workout-cell\" \n              />\n              <GrommetButton \n                label=\"Start Workout\" \n                // onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)} \n              />\n            </Grid>\n        </div>\n        \n        <Route render={({ history }) => (\n          <button onClick={() => { \n              let workoutType = document.querySelector(\"#workoutType\").value;\n              let workoutTarget = document.querySelector(\"#workoutTarget\").value;\n              let workoutReps = document.querySelector(\"#workoutTiming\").value;\n              if (workoutReps === \"\" ) { workoutReps = \"12\" }\n\n              history.push( {\n                pathname: '/start',\n                state: { workoutType: workoutType, workoutTarget: workoutTarget, workoutReps: workoutReps }\n              });\n            }} >\n            Start Workout\n          </button>\n        )} />\n      </div>\n      \n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}