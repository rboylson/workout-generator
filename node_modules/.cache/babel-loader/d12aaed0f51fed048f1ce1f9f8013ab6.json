{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Workout.scss';\nimport CompleteMessage from './CompleteMessage.js';\nimport { Box, CheckBox, Grid, List } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet checkedNum = 0;\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": \"0\",\n      \"checked\": false\n    };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n}\n\nfunction setChecked(event, workoutArray) {\n  if (event === true) {\n    checkedNum++;\n  } else {\n    checkedNum--;\n  }\n\n  if (checkedNum === workoutArray.length) {\n    console.log(\"complete\");\n  }\n\n  console.log(checkedNum, workoutArray.length);\n}\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const {\n    workoutType,\n    workoutTarget,\n    workoutReps\n  } = state;\n  const [query, setQuery] = useState([]);\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n  randomizeQuery(query, workoutArray, workoutReps);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    direction: \"row-responsive\",\n    justify: \"center\",\n    align: \"center\",\n    pad: \"xlarge\",\n    background: \"dark-2\",\n    gap: \"medium\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      width: {\n        width: \"600px\",\n        min: \"600px\",\n        max: \"600px\"\n      } // align=\"center\"\n      ,\n      children: /*#__PURE__*/_jsxDEV(List, {\n        data: workoutArray,\n        primaryKey: \"name\",\n        secondaryKey: \"count\",\n        action: item => /*#__PURE__*/_jsxDEV(CheckBox, {\n          onChange: event => setChecked(event.target.checked, workoutArray)\n        }, \"id\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, \"id\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CompleteMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"kvpqPid8/VwZ4oiPdvje8XuisHk=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","CompleteMessage","Box","CheckBox","Grid","List","checkedNum","randomizeQuery","query","workoutArray","workoutReps","j","length","i","randomNumber","Math","floor","random","count","setChecked","event","console","log","Workout","props","state","workoutType","workoutTarget","setQuery","url","fetch","then","response","json","width","min","max","item","target","checked"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Workout.scss';\nimport CompleteMessage from './CompleteMessage.js';\nimport {\n  Box,\n  CheckBox,\n  Grid,\n  List\n} from 'grommet';\n\nlet checkedNum = 0;\n\n\nfunction randomizeQuery(query, workoutArray, workoutReps) {\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": \"0\", \"checked\": false };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  } \n}\n\nfunction setChecked(event, workoutArray) {\n  if (event === true ) {\n    checkedNum++;\n  } else {\n    checkedNum--;\n  }\n  if (checkedNum === workoutArray.length ) {\n    console.log(\"complete\");\n  }\n  console.log(checkedNum, workoutArray.length);\n}\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const {workoutType, workoutTarget, workoutReps } = state;\n  const [query, setQuery] = useState([]);\n  let workoutArray = [];\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  randomizeQuery(query, workoutArray, workoutReps);\n\n  return (\n    <Box\n      direction=\"row-responsive\"\n      justify=\"center\"\n      align=\"center\"\n      pad=\"xlarge\"\n      background=\"dark-2\"\n      gap=\"medium\"\n    >\n      <Grid\n          width= {\n            {\n            width: \"600px\",\n            min: \"600px\",\n            max: \"600px\",\n            }\n          }\n          // align=\"center\"\n          >\n          <List\n            data={ workoutArray }\n            key=\"id\"\n            primaryKey=\"name\"\n            secondaryKey=\"count\"\n            action={(item) => (\n              <CheckBox \n                key=\"id\"\n                onChange={(event) => setChecked(event.target.checked, workoutArray)}\n              />\n            )}\n          />\n      </Grid>\n      <div>{ <CompleteMessage /> }</div>\n    </Box>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}