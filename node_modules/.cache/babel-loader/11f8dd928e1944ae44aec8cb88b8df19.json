{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button as GrommetButton, Grid, Grommet, Header, Nav, ResponsiveContext, Select, Text, TextInput } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myTheme = deepMerge(grommet, {});\n\nfunction setWorkoutTypeInputOptions(optionss) {// console.log(optionss);\n}\n\nfunction WorkoutGenerator() {\n  _s();\n\n  let options = [\"Stretch\", \"Exercise\"];\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  const size = useContext(ResponsiveContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/list\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        size: \"large\",\n        children: \"\\u2699\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Generate Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      fill: true,\n      columns: ['medium', 'medium', 'xsmall', 'small'],\n      justifyContent: \"center\",\n      gap: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Exercise Type\",\n        multiple: true,\n        closeOnChange: false,\n        options: options // onChange={({ value: nextValue }) => setValue(nextValue)}\n        // value={workoutTypeInput}\n        ,\n        onChange: event => setWorkoutTypeInput(event.value) // onChange={event => setWorkoutTypeInputOptions(event)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Target\",\n        value: workoutTargetInput,\n        onSelect: event => setWorkoutTargetInput(event.suggestion),\n        suggestions: targetExercises\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Reps\",\n        value: workoutRepsInput,\n        onChange: event => setWorkoutRepsInput(event.target.value),\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        render: ({\n          history\n        }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n          label: \"Start Workout\",\n          onClick: () => {\n            history.push({\n              pathname: '/start',\n              state: {\n                workoutType: workoutTypeInput,\n                workoutTarget: workoutTargetInput,\n                workoutReps: workoutRepsInput\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"mPtrdfk12r68gz8OjzailV5w/10=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","useContext","Link","Box","Button","GrommetButton","Grid","Grommet","Header","Nav","ResponsiveContext","Select","Text","TextInput","grommet","deepMerge","myTheme","setWorkoutTypeInputOptions","optionss","WorkoutGenerator","options","typeExercises","targetExercises","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","fetch","then","response","json","map","element","index","name","size","event","value","suggestion","target","history","push","pathname","state","workoutType","workoutTarget","workoutReps"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button as GrommetButton, Grid, Grommet, Header, Nav, ResponsiveContext, Select, Text, TextInput } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\n\nconst myTheme = deepMerge(grommet, {\n  \n});\n\nfunction setWorkoutTypeInputOptions(optionss) {\n  // console.log(optionss);\n}\n\nfunction WorkoutGenerator() {\n\n  let options = [\"Stretch\", \"Exercise\"];\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  const size = useContext(ResponsiveContext);\n\n\n  return (\n    <div>\n      <Link to='/list'>\n        <Text size=\"large\">⚙</Text>\n      </Link>    \n      <h1>Generate Workout</h1>\n      <Grid\n        fill\n        columns={['medium', 'medium', 'xsmall', 'small']}\n        justifyContent=\"center\"\n        gap=\"small\" >\n        <Select\n          placeholder=\"Exercise Type\"\n          multiple\n          closeOnChange={false}\n          options={options}\n          // onChange={({ value: nextValue }) => setValue(nextValue)}\n          // value={workoutTypeInput}\n          onChange={event => setWorkoutTypeInput(event.value)}\n          // onChange={event => setWorkoutTypeInputOptions(event)}\n        />        \n        <TextInput\n          placeholder=\"Exercise Target\"\n          value={workoutTargetInput}\n          onSelect={event => setWorkoutTargetInput(event.suggestion)}\n          suggestions={targetExercises}\n        />\n        <TextInput \n          placeholder=\"Reps\" \n          value={workoutRepsInput}\n          onChange={event => setWorkoutRepsInput(event.target.value)}\n          type=\"number\"\n        />\n        <Route render={({ history }) => (\n          <GrommetButton\n            label=\"Start Workout\" \n            onClick={() => { \n                history.push( {\n                  pathname: '/start',\n                  state: { \n                    workoutType: workoutTypeInput, \n                    workoutTarget: workoutTargetInput, \n                    workoutReps: workoutRepsInput }\n                });\n              }} >\n            </GrommetButton>\n          )} \n        />\n      </Grid>\n    </div>\n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}