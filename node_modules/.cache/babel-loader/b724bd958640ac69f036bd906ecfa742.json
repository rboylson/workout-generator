{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/AddWorkout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Button as GrommetButton, TextInput } from 'grommet';\nimport './AddWorkout.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput) {\n  let url = `http://localhost:3000/workouts/`;\n  let body = {\n    name: exerciseNameInput,\n    type: exerciseTypeInput,\n    timing: exerciseTargetInput,\n    target: exerciseTimingInput\n  };\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n}\n\nfunction AddWorkout(props) {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-workout-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Name\",\n        value: exerciseNameInput,\n        onChange: event => setExerciseNameInput(event.target.value),\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Type\",\n        value: exerciseTypeInput,\n        onSelect: event => setExerciseTypeInput(event.suggestion),\n        suggestions: typeExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Target\",\n        value: exerciseTargetInput,\n        onSelect: event => setExerciseTargetInput(event.suggestion),\n        suggestions: targetExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Timing\",\n        value: exerciseTimingInput,\n        onChange: event => setExerciseTimingInput(event.target.value),\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GrommetButton, {\n        label: \"Add Exercise\",\n        onClick: () => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddWorkout, \"dxHdReMn0JMQaDG1GDX83LIanGg=\");\n\n_c = AddWorkout;\nexport default AddWorkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWorkout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/AddWorkout.js"],"names":["useEffect","useState","Button","GrommetButton","TextInput","addExerciseToList","exerciseNameInput","exerciseTypeInput","exerciseTargetInput","exerciseTimingInput","url","body","name","type","timing","target","fetch","method","headers","Accept","JSON","stringify","AddWorkout","props","typeExercises","targetExercises","setType","targets","setTarget","setExerciseNameInput","setExerciseTypeInput","setExerciseTargetInput","setExerciseTimingInput","then","response","json","event","value","suggestion"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Button as GrommetButton, TextInput } from 'grommet';\nimport './AddWorkout.scss';\n\n\nfunction addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput) {\n  let url = `http://localhost:3000/workouts/`;\n\n  let body = {\n    name: exerciseNameInput,\n    type: exerciseTypeInput,\n    timing: exerciseTargetInput,\n    target: exerciseTimingInput\n  };\n\n  fetch(url, {\n    method: 'POST',\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n    },\n    body: JSON.stringify(body)\n  });\n}\n\nfunction AddWorkout( props ) {  \n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n\n\n  return (\n    <div>\n      <h2>Add Exercise</h2>\n        <div className=\"add-workout-wrapper\">\n          <TextInput \n            placeholder=\"Exercise Name\" \n            value={exerciseNameInput}\n            onChange={event => setExerciseNameInput(event.target.value)}\n            className=\"add-workout-cell\"\n          />\n          <TextInput\n            placeholder=\"Exercise Type\"\n            value={exerciseTypeInput}\n            onSelect={event => setExerciseTypeInput(event.suggestion)}\n            suggestions={typeExercises}\n            className=\"add-workout-cell\"\n          />        \n          <TextInput\n            placeholder=\"Exercise Target\"\n            value={exerciseTargetInput}\n            onSelect={event => setExerciseTargetInput(event.suggestion)}\n            suggestions={targetExercises}\n            className=\"add-workout-cell\"\n          />\n          <TextInput \n            placeholder=\"Timing\" \n            value={exerciseTimingInput}\n            onChange={event => setExerciseTimingInput(event.target.value)}\n            className=\"add-workout-cell\" \n          />\n          <GrommetButton \n            label=\"Add Exercise\" \n            onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput)} \n          />\n        </div>\n    </div>\n  );\n}\n\nexport default AddWorkout;\n"]},"metadata":{},"sourceType":"module"}