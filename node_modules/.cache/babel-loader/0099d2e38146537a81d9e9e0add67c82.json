{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/WorkoutGenerator.js\",\n    _s = $RefreshSig$();\n\nimport { Route } from 'react-router-dom';\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button as GrommetButton, Grid, Grommet, Header, Nav, ResponsiveContext, Select, Text, TextInput, ThemeContext } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction setWorkoutTypeInputOptions(optionss) {// console.log(optionss);\n}\n\nfunction WorkoutGenerator() {\n  _s();\n\n  let options = [\"Stretch\", \"Exercise\"];\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  const size = useContext(ResponsiveContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-generator\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      justify: \"end\",\n      children: /*#__PURE__*/_jsxDEV(Nav, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/list\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            size: \"large\",\n            children: \"\\u2699\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"workout-generator-form\",\n      pad: \"xlarge\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"large\",\n        level: \"1\",\n        textAlign: \"center\",\n        margin: \"large\",\n        children: \"Generate Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        fill: true,\n        columns: ['medium', 'medium', 'xsmall', 'small'],\n        justifyContent: \"center\",\n        gap: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(ThemeContext.Extend, {\n          value: {\n            global: {\n              colors: {\n                border: '#ffdbe1'\n              },\n              focus: {\n                border: {\n                  color: 'purple'\n                }\n              }\n            },\n            select: {\n              control: {\n                extend: 'padding: 3px 6px;',\n                open: {\n                  background: '#ece0fa',\n                  border: '1px solid #7D4CDB'\n                }\n              }\n            },\n            button: {\n              extend: () => `\n                  font-size: 18px;\n                  font-weight: normal;\n                  color: purple;\n                  background: #fff;\n                  border-color: pink;\n            \n                  &::placeholder {\n                    color: purple;\n                  }\n\n                  svg {\n                    fill: purple;\n                    stroke: purple;\n                  }\n                `\n            },\n            textInput: {\n              extend: () => `\n                font-size: 18px;\n                font-weight: normal;\n                color: purple;\n                background: #fff;\n                // border: 1px solid #ffdbe1;\n          \n                &::placeholder {\n                  color: purple;\n                }\n              `\n            },\n            text: {\n              extend: () => `\n                font-size: 18px;\n                font-weight: normal;\n                color: purple;\n                // background: #fff;\n                // border: 1px solid #ffdbe1;\n          \n                &::placeholder {\n                  color: purple;\n                }\n              `\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Exercise Type\",\n            multiple: true,\n            closeOnChange: false,\n            options: options,\n            onChange: event => setWorkoutTypeInput(event.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            className: \"workout-select\",\n            placeholder: \"Exercise Target\",\n            options: [\"One\", \"Two\", \"Three\"],\n            onChange: event => setWorkoutTargetInput(event.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ThemeContext.Extend, {\n          value: {\n            global: {\n              colors: {\n                border: 'blue'\n              },\n              focus: {\n                border: {\n                  color: 'purple'\n                }\n              }\n            },\n            textInput: {\n              extend: () => `\n                  font-size: 18px;\n                  font-weight: normal;\n                  color: purple;\n                  background: #fff;\n                  border: 1px solid #ffdbe1;\n            \n                  &::placeholder {\n                    color: purple;\n                  }\n                `\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            className: \"workout-input\",\n            placeholder: \"Reps\",\n            value: workoutRepsInput,\n            onChange: event => setWorkoutRepsInput(event.target.value),\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ThemeContext.Extend, {\n          value: {\n            global: {\n              colors: {\n                border: 'blue'\n              },\n              focus: {\n                shadow: {\n                  width: '3px',\n                  color: 'blue'\n                }\n              }\n            },\n            button: {\n              border: {\n                color: 'purple'\n              },\n              extend: () => `\n                  font-size: 18px;\n                  font-weight: normal;\n                  color: purple;\n                  background: #fff;\n                  border: 1px solid #ffdbe1;\n            \n                  &::focus {\n                    color: purple;\n                    box-shadow: 10px 10px 5px grey;\n                  }\n                `\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            render: ({\n              history\n            }) => /*#__PURE__*/_jsxDEV(GrommetButton, {\n              label: \"Start Workout\",\n              onClick: () => {\n                history.push({\n                  pathname: '/start',\n                  state: {\n                    workoutType: workoutTypeInput,\n                    workoutTarget: workoutTargetInput,\n                    workoutReps: workoutRepsInput\n                  }\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkoutGenerator, \"mPtrdfk12r68gz8OjzailV5w/10=\");\n\n_c = WorkoutGenerator;\nexport default WorkoutGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkoutGenerator\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/WorkoutGenerator.js"],"names":["Route","useEffect","useState","useContext","Link","Box","Button","GrommetButton","Grid","Grommet","Header","Nav","ResponsiveContext","Select","Text","TextInput","ThemeContext","grommet","deepMerge","setWorkoutTypeInputOptions","optionss","WorkoutGenerator","options","typeExercises","targetExercises","workoutTypeInput","setWorkoutTypeInput","workoutTargetInput","setWorkoutTargetInput","workoutRepsInput","setWorkoutRepsInput","type","setType","targets","setTarget","fetch","then","response","json","map","element","index","name","size","global","colors","border","focus","color","select","control","extend","open","background","button","textInput","text","event","value","target","shadow","width","history","push","pathname","state","workoutType","workoutTarget","workoutReps"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,GAAT,EAAcC,MAAM,IAAIC,aAAxB,EAAuCC,IAAvC,EAA6CC,OAA7C,EAAsDC,MAAtD,EAA8DC,GAA9D,EAAmEC,iBAAnE,EAAsFC,MAAtF,EAA8FC,IAA9F,EAAoGC,SAApG,EAA+GC,YAA/G,QAAmI,SAAnI;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,eAA1B;;;AAEA,SAASC,0BAAT,CAAoCC,QAApC,EAA8C,CAC5C;AACD;;AAED,SAASC,gBAAT,GAA4B;AAAA;;AAE1B,MAAIC,OAAO,GAAG,CAAC,SAAD,EAAY,UAAZ,CAAd;AAEA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CxB,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACyB,kBAAD,EAAqBC,qBAArB,IAA8C1B,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAC2B,gBAAD,EAAmBC,mBAAnB,IAA0C5B,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAAC6B,IAAD,EAAOC,OAAP,IAAkB9B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC+B,OAAD,EAAUC,SAAV,IAAuBhC,QAAQ,CAAC,EAAD,CAArC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACZkC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQJ,OAFR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA/B,EAAAA,SAAS,CAAC,MAAI;AACZkC,IAAAA,KAAK,CAAC,8BAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQF,SAFR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAH,EAAAA,IAAI,CAACQ,GAAL,CAAS,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC3B,WAAOlB,aAAa,CAACkB,KAAD,CAAb,GAAuBD,OAAO,CAACE,IAAtC;AACD,GAFD;AAIAT,EAAAA,OAAO,CAACM,GAAR,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC9B,WAAOjB,eAAe,CAACiB,KAAD,CAAf,GAAyBD,OAAO,CAACE,IAAxC;AACD,GAFD;AAIA,QAAMC,IAAI,GAAGxC,UAAU,CAACS,iBAAD,CAAvB;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,KAAhB;AAAA,6BACE,QAAC,GAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,OAAT;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,GAAD;AACE,MAAA,SAAS,EAAC,wBADZ;AAEE,MAAA,GAAG,EAAC,QAFN;AAAA,8BAGE,QAAC,IAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAC,GAFR;AAGE,QAAA,SAAS,EAAC,QAHZ;AAIE,QAAA,MAAM,EAAC,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAUE,QAAC,IAAD;AACE,QAAA,IAAI,MADN;AAEE,QAAA,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,OAA/B,CAFX;AAGE,QAAA,cAAc,EAAC,QAHjB;AAIE,QAAA,GAAG,EAAC,OAJN;AAAA,gCAOE,QAAC,YAAD,CAAc,MAAd;AACE,UAAA,KAAK,EAAE;AACLgC,YAAAA,MAAM,EAAE;AACNC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,MAAM,EAAE;AADF,eADF;AAINC,cAAAA,KAAK,EAAE;AACLD,gBAAAA,MAAM,EAAE;AACNE,kBAAAA,KAAK,EAAE;AADD;AADH;AAJD,aADH;AAWLC,YAAAA,MAAM,EAAE;AACNC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,mBADD;AAEPC,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,UAAU,EAAE,SADR;AAEJP,kBAAAA,MAAM,EAAE;AAFJ;AAFC;AADH,aAXH;AAoBLQ,YAAAA,MAAM,EAAE;AACNH,cAAAA,MAAM,EAAE,MAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBsB,aApBH;AAuCPI,YAAAA,SAAS,EAAE;AACTJ,cAAAA,MAAM,EAAE,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXuB,aAvCJ;AAqDPK,YAAAA,IAAI,EAAE;AACJL,cAAAA,MAAM,EAAE,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXkB;AArDC,WADT;AAAA,kCAsEE,QAAC,MAAD;AACE,YAAA,WAAW,EAAC,eADd;AAEE,YAAA,QAAQ,MAFV;AAGE,YAAA,aAAa,EAAE,KAHjB;AAIE,YAAA,OAAO,EAAE7B,OAJX;AAKE,YAAA,QAAQ,EAAEmC,KAAK,IAAI/B,mBAAmB,CAAC+B,KAAK,CAACC,KAAP;AALxC;AAAA;AAAA;AAAA;AAAA,kBAtEF,eA8EE,QAAC,MAAD;AACE,YAAA,SAAS,EAAC,gBADZ;AAEE,YAAA,WAAW,EAAC,iBAFd;AAGE,YAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAHX;AAIE,YAAA,QAAQ,EAAED,KAAK,IAAI7B,qBAAqB,CAAC6B,KAAK,CAACC,KAAP;AAJ1C;AAAA;AAAA;AAAA;AAAA,kBA9EF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eA6FE,QAAC,YAAD,CAAc,MAAd;AACE,UAAA,KAAK,EAAE;AACLd,YAAAA,MAAM,EAAE;AACNC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,MAAM,EAAE;AADF,eADF;AAINC,cAAAA,KAAK,EAAE;AACLD,gBAAAA,MAAM,EAAE;AACNE,kBAAAA,KAAK,EAAE;AADD;AADH;AAJD,aADH;AAWLO,YAAAA,SAAS,EAAE;AACTJ,cAAAA,MAAM,EAAE,MAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXyB;AAXN,WADT;AAAA,iCA2BE,QAAC,SAAD;AACE,YAAA,SAAS,EAAC,eADZ;AAEE,YAAA,WAAW,EAAC,MAFd;AAGE,YAAA,KAAK,EAAEtB,gBAHT;AAIE,YAAA,QAAQ,EAAE4B,KAAK,IAAI3B,mBAAmB,CAAC2B,KAAK,CAACE,MAAN,CAAaD,KAAd,CAJxC;AAKE,YAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA;AA3BF;AAAA;AAAA;AAAA;AAAA,gBA7FF,eAiIE,QAAC,YAAD,CAAc,MAAd;AACE,UAAA,KAAK,EAAE;AACLd,YAAAA,MAAM,EAAE;AACNC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,MAAM,EAAE;AADF,eADF;AAINC,cAAAA,KAAK,EAAE;AACLa,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,KAAK,EAAE,KADD;AAENb,kBAAAA,KAAK,EAAE;AAFD;AADH;AAJD,aADH;AAYLM,YAAAA,MAAM,EAAE;AACNR,cAAAA,MAAM,EAAE;AACNE,gBAAAA,KAAK,EAAE;AADD,eADF;AAING,cAAAA,MAAM,EAAE,MAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfsB;AAZH,WADT;AAAA,iCAgCA,QAAC,KAAD;AAAO,YAAA,MAAM,EAAE,CAAC;AAAEW,cAAAA;AAAF,aAAD,kBACb,QAAC,aAAD;AACE,cAAA,KAAK,EAAC,eADR;AAEE,cAAA,OAAO,EAAE,MAAM;AACXA,gBAAAA,OAAO,CAACC,IAAR,CAAc;AACZC,kBAAAA,QAAQ,EAAE,QADE;AAEZC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,WAAW,EAAEzC,gBADR;AAEL0C,oBAAAA,aAAa,EAAExC,kBAFV;AAGLyC,oBAAAA,WAAW,EAAEvC;AAHR;AAFK,iBAAd;AAOD;AAVL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAhCA;AAAA;AAAA;AAAA;AAAA,gBAjIF;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwMD;;GA3OQR,gB;;KAAAA,gB;AA6OT,eAAeA,gBAAf","sourcesContent":["import { Route } from 'react-router-dom'\nimport { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button as GrommetButton, Grid, Grommet, Header, Nav, ResponsiveContext, Select, Text, TextInput, ThemeContext } from 'grommet';\nimport { grommet } from 'grommet/themes';\nimport { deepMerge } from 'grommet/utils';\n\nfunction setWorkoutTypeInputOptions(optionss) {\n  // console.log(optionss);\n}\n\nfunction WorkoutGenerator() {\n\n  let options = [\"Stretch\", \"Exercise\"];\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [workoutTypeInput, setWorkoutTypeInput] = useState('');\n  const [workoutTargetInput, setWorkoutTargetInput] = useState('');\n  const [workoutRepsInput, setWorkoutRepsInput] = useState('');\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  const size = useContext(ResponsiveContext);\n\n\n  return (\n    <div className=\"workout-generator\">\n      <Header justify=\"end\">\n        <Nav>\n          <Link to='/list'>\n            <Text size=\"large\">⚙</Text>\n          </Link>\n        </Nav>\n      </Header>      \n      <Box \n        className=\"workout-generator-form\"\n        pad=\"xlarge\" >\n        <Text \n          size=\"large\"\n          level=\"1\"\n          textAlign=\"center\"\n          margin=\"large\" >\n          Generate Workout\n        </Text>\n        <Grid\n          fill\n          columns={['medium', 'medium', 'xsmall', 'small']}\n          justifyContent=\"center\"\n          gap=\"small\" >\n                \n\n          <ThemeContext.Extend\n            value={{\n              global: {\n                colors: {\n                  border: '#ffdbe1',\n                },\n                focus: {\n                  border: {\n                    color: 'purple',\n                  },\n                },\n              },\n              select: {\n                control: {\n                  extend: 'padding: 3px 6px;',\n                  open: {\n                    background: '#ece0fa',\n                    border: '1px solid #7D4CDB'\n                  }\n                }\n              },\n              button: {\n                extend: () => `\n                  font-size: 18px;\n                  font-weight: normal;\n                  color: purple;\n                  background: #fff;\n                  border-color: pink;\n            \n                  &::placeholder {\n                    color: purple;\n                  }\n\n                  svg {\n                    fill: purple;\n                    stroke: purple;\n                  }\n                `,\n              },\n        \n            textInput: {\n              extend: () => `\n                font-size: 18px;\n                font-weight: normal;\n                color: purple;\n                background: #fff;\n                // border: 1px solid #ffdbe1;\n          \n                &::placeholder {\n                  color: purple;\n                }\n              `,\n            },\n        \n            text: {\n              extend: () => `\n                font-size: 18px;\n                font-weight: normal;\n                color: purple;\n                // background: #fff;\n                // border: 1px solid #ffdbe1;\n          \n                &::placeholder {\n                  color: purple;\n                }\n              `,\n            }\n          }}\n          >\n\n            <Select\n              placeholder=\"Exercise Type\"\n              multiple\n              closeOnChange={false}\n              options={options}\n              onChange={event => setWorkoutTypeInput(event.value)}\n            /> \n\n            <Select\n              className=\"workout-select\"\n              placeholder=\"Exercise Target\"\n              options={[\"One\", \"Two\", \"Three\"]}\n              onChange={event => setWorkoutTargetInput(event.value)}\n            />      \n          </ThemeContext.Extend>\n\n          <ThemeContext.Extend\n            value={{\n              global: {\n                colors: {\n                  border: 'blue',\n                },\n                focus: {\n                  border: {\n                    color: 'purple',\n                  },\n                },\n              },\n              textInput: {\n                extend: () => `\n                  font-size: 18px;\n                  font-weight: normal;\n                  color: purple;\n                  background: #fff;\n                  border: 1px solid #ffdbe1;\n            \n                  &::placeholder {\n                    color: purple;\n                  }\n                `,\n              }\n            }}\n          >   \n            <TextInput \n              className=\"workout-input\"\n              placeholder=\"Reps\" \n              value={workoutRepsInput}\n              onChange={event => setWorkoutRepsInput(event.target.value)}\n              type=\"number\"\n            />\n          </ThemeContext.Extend>\n\n          <ThemeContext.Extend\n            value={{\n              global: {\n                colors: {\n                  border: 'blue',\n                },\n                focus: {\n                  shadow: {\n                    width: '3px',\n                    color: 'blue',\n                  }\n                }\n              },\n              button: {\n                border: {\n                  color: 'purple',\n                },\n                extend: () => `\n                  font-size: 18px;\n                  font-weight: normal;\n                  color: purple;\n                  background: #fff;\n                  border: 1px solid #ffdbe1;\n            \n                  &::focus {\n                    color: purple;\n                    box-shadow: 10px 10px 5px grey;\n                  }\n                `,\n              },\n          }}\n          >\n          <Route render={({ history }) => (\n            <GrommetButton\n              label=\"Start Workout\" \n              onClick={() => { \n                  history.push( {\n                    pathname: '/start',\n                    state: { \n                      workoutType: workoutTypeInput, \n                      workoutTarget: workoutTargetInput, \n                      workoutReps: workoutRepsInput }\n                  });\n                }} >\n              </GrommetButton>\n            )} \n          />\n        </ThemeContext.Extend>\n        </Grid>\n      </Box>\n    </div>\n  );\n}\n\nexport default WorkoutGenerator;"]},"metadata":{},"sourceType":"module"}