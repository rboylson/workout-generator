{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/AddWorkout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Grid, Button as GrommetButton, Text, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput, props) {\n  let url = `http://localhost:3000/workouts/`;\n  let body = {\n    name: exerciseNameInput,\n    type: exerciseTypeInput,\n    timing: exerciseTargetInput,\n    target: exerciseTimingInput\n  };\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  props.setUrlUpdated(url);\n}\n\nfunction AddWorkout(props) {\n  _s();\n\n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:3000/types').then(response => response.json()).then(setType);\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3000/target').then(response => response.json()).then(setTarget);\n  }, []);\n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });\n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      size: \"large\",\n      textAlign: \"center\",\n      children: \"Add Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      fill: true,\n      columns: ['small', 'xsmall', 'small', 'xsmall', 'xsmall'],\n      rows: ['flex'],\n      gap: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Name\",\n        value: exerciseNameInput,\n        onChange: event => setExerciseNameInput(event.target.value),\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Type\",\n        value: exerciseTypeInput,\n        onSelect: event => setExerciseTypeInput(event.suggestion),\n        suggestions: typeExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Exercise Target\",\n        value: exerciseTargetInput,\n        onSelect: event => setExerciseTargetInput(event.suggestion),\n        suggestions: targetExercises,\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        placeholder: \"Timing\",\n        value: exerciseTimingInput,\n        onChange: event => setExerciseTimingInput(event.target.value),\n        className: \"add-workout-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GrommetButton, {\n        label: \"Add\",\n        onClick: () => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput, setUrlUpdated)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddWorkout, \"dxHdReMn0JMQaDG1GDX83LIanGg=\");\n\n_c = AddWorkout;\nexport default AddWorkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWorkout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/AddWorkout.js"],"names":["useEffect","useState","Grid","Button","GrommetButton","Text","TextInput","addExerciseToList","exerciseNameInput","exerciseTypeInput","exerciseTargetInput","exerciseTimingInput","props","url","body","name","type","timing","target","fetch","method","headers","Accept","JSON","stringify","setUrlUpdated","AddWorkout","typeExercises","targetExercises","setType","targets","setTarget","setExerciseNameInput","setExerciseTypeInput","setExerciseTargetInput","setExerciseTimingInput","then","response","json","map","element","index","event","value","suggestion"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Grid, Button as GrommetButton, Text, TextInput } from 'grommet';\n\n\nfunction addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput, props) {\n  let url = `http://localhost:3000/workouts/`;\n\n  let body = {\n    name: exerciseNameInput,\n    type: exerciseTypeInput,\n    timing: exerciseTargetInput,\n    target: exerciseTimingInput\n  };\n\n  fetch(url, {\n    method: 'POST',\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n    },\n    body: JSON.stringify(body)\n  });\n\n  props.setUrlUpdated(url);\n\n}\n\nfunction AddWorkout( props ) {  \n  \n  let typeExercises = [];\n  let targetExercises = [];\n  const [type, setType] = useState([]);\n  const [targets, setTarget] = useState([]);\n  const [exerciseNameInput, setExerciseNameInput] = useState('');\n  const [exerciseTypeInput, setExerciseTypeInput] = useState('');\n  const [exerciseTargetInput, setExerciseTargetInput] = useState('');\n  const [exerciseTimingInput, setExerciseTimingInput] = useState('');\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/types')\n      .then(response => response.json())\n      .then(setType);\n  }, []);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/target')\n      .then(response => response.json())\n      .then(setTarget);\n  }, []);\n  \n  type.map((element, index) => {\n    return typeExercises[index] = element.name;\n  });  \n  \n  targets.map((element, index) => {\n    return targetExercises[index] = element.name;\n  });\n\n  return (\n    <div>\n      <Text\n        size=\"large\"\n        textAlign=\"center\"\n      >\n        Add Exercise\n      </Text>\n      <Grid\n        fill\n        columns={['small', 'xsmall', 'small', 'xsmall', 'xsmall']}\n        rows={['flex']}\n        gap=\"small\"\n      >\n        <TextInput \n          placeholder=\"Exercise Name\" \n          value={exerciseNameInput}\n          onChange={event => setExerciseNameInput(event.target.value)}\n          className=\"add-workout-cell\"\n        />\n        <TextInput\n          placeholder=\"Exercise Type\"\n          value={exerciseTypeInput}\n          onSelect={event => setExerciseTypeInput(event.suggestion)}\n          suggestions={typeExercises}\n          className=\"add-workout-cell\"\n        />        \n        <TextInput\n          placeholder=\"Exercise Target\"\n          value={exerciseTargetInput}\n          onSelect={event => setExerciseTargetInput(event.suggestion)}\n          suggestions={targetExercises}\n          className=\"add-workout-cell\"\n        />\n        <TextInput \n          placeholder=\"Timing\" \n          value={exerciseTimingInput}\n          onChange={event => setExerciseTimingInput(event.target.value)}\n          className=\"add-workout-cell\" \n        />\n        <GrommetButton \n          label=\"Add\" \n          onClick={() => addExerciseToList(exerciseNameInput, exerciseTypeInput, exerciseTargetInput, exerciseTimingInput, setUrlUpdated)} \n        />\n    </Grid>\n    </div>\n  );\n}\n\nexport default AddWorkout;\n"]},"metadata":{},"sourceType":"module"}