{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/Workout.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Workout.scss';\nimport CompleteMessage from './CompleteMessage.js';\nimport { Box, Button as GrommetButton, Grid, List, TextInput } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Workout(props) {\n  _s();\n\n  const {\n    state\n  } = useLocation();\n  const {\n    workoutType,\n    workoutTarget,\n    workoutReps\n  } = state;\n  const [query, setQuery] = useState([]);\n  const [workoutArray, setWorkoutArray] = useState([]);\n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(setQuery);\n  }, [url]);\n\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = { ...query[j],\n      \"count\": \"0\"\n    };\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * workoutArray.length);\n\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  }\n\n  let checkedArray = [];\n  let checkboxArray = document.getElementsByClassName(\"checkbox-item\");\n\n  function workoutChecked(workoutId) {\n    if (checkedArray.indexOf(workoutId) === -1) {\n      checkedArray.push(workoutId);\n    } else {\n      checkedArray.splice((checkedArray.indexOf(workoutId), 1));\n    }\n\n    console.log(\"! \" + checkboxArray.length + \" \" + checkedArray.length + \" \" + checkedArray);\n\n    if (checkedArray.length === checkboxArray.length) {\n      console.log(\"complete!\");\n      let completeMessage = document.getElementById(\"complete-message\");\n      completeMessage.style.left = \"0\";\n    }\n  }\n\n  let WorkoutList = () => {\n    setWorkoutArray(workoutArray);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      pad: \"large\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"workout-container\",\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          primaryKey: \"name\",\n          secondaryKey: \"percent\",\n          data: [{\n            name: 'Alan',\n            percent: 20\n          }, {\n            name: 'Bryan',\n            percent: 30\n          }, {\n            name: 'Chris',\n            percent: 40\n          }, {\n            name: 'Eric',\n            percent: 80\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), workoutArray.map(item => {\n          if (item && item.count > 0) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"workout-list-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: [item.name, \": \", item.timing]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"label-wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [item.count, \"x\\xA0\\xA0\\xA0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  className: \"checkboxWorkout checkbox-item\",\n                  id: item.id,\n                  name: item.id,\n                  value: item.id,\n                  onClick: () => workoutChecked(item.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this);\n          }\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(WorkoutList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CompleteMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Workout, \"YbPtbFMPR/If1ClnqE8nMNIqEjk=\", false, function () {\n  return [useLocation];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/Workout.js"],"names":["useEffect","useState","useLocation","CompleteMessage","Box","Button","GrommetButton","Grid","List","TextInput","Workout","props","state","workoutType","workoutTarget","workoutReps","query","setQuery","workoutArray","setWorkoutArray","url","fetch","then","response","json","j","length","i","randomNumber","Math","floor","random","count","checkedArray","checkboxArray","document","getElementsByClassName","workoutChecked","workoutId","indexOf","push","splice","console","log","completeMessage","getElementById","style","left","WorkoutList","name","percent","map","item","timing","id"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Workout.scss';\nimport CompleteMessage from './CompleteMessage.js';\nimport {\n  Box,\n  Button as GrommetButton,\n  Grid,\n  List,\n  TextInput\n} from 'grommet';\n\nfunction Workout( props ) {\n\n  const {state} = useLocation();\n  const {workoutType, workoutTarget, workoutReps } = state;\n  const [query, setQuery] = useState([]);\n  const [workoutArray, setWorkoutArray] = useState([]);\n  \n  let url = `http://localhost:3000/workouts?type=${workoutType}&target=${workoutTarget}`;\n  useEffect(()=>{\n    fetch(url)\n      .then(response => response.json())\n      .then(setQuery);\n  }, [url]);\n\n  for (var j = 0; j < query.length; j++) {\n    workoutArray[j] = {...query[j], \"count\": \"0\"};\n  }\n\n  for (var i = 0; i < workoutReps; i++) {\n    let randomNumber = Math.floor(Math.random() * (workoutArray.length));\n    if (workoutArray[randomNumber] != null) {\n      workoutArray[randomNumber].count++;\n    }\n  } \n\n  let checkedArray = [];\n  let checkboxArray = document.getElementsByClassName(\"checkbox-item\");\n\n  function workoutChecked(workoutId) {\n\n    if(checkedArray.indexOf(workoutId) === -1 ) {\n      checkedArray.push(workoutId);\n    } else {\n      checkedArray.splice((checkedArray.indexOf(workoutId), 1));\n    }\n    console.log(\"! \" + checkboxArray.length + \" \" + checkedArray.length + \" \" + checkedArray);\n\n    if (checkedArray.length === checkboxArray.length) {\n      console.log(\"complete!\");\n      let completeMessage = document.getElementById(\"complete-message\");\n      completeMessage.style.left = \"0\";\n    }\n  }\n\n\n  let WorkoutList = () => { \n    setWorkoutArray(workoutArray);\n    return (\n      <Box pad=\"large\">\n        <div className=\"workout-container\">\n          \n          <List\n            primaryKey=\"name\"\n            secondaryKey=\"percent\"\n            data={[\n              { name: 'Alan', percent: 20 },\n              { name: 'Bryan', percent: 30 },\n              { name: 'Chris', percent: 40 },\n              { name: 'Eric', percent: 80 },\n            ]}\n          />\n          \n          {\n            workoutArray.map((item) => {\n              if (item && item.count > 0) {\n                return (\n                  <div className=\"workout-list-item\">\n                    <h1>{item.name}: {item.timing}</h1>\n                    <div className=\"label-wrapper\">\n                      <label>{item.count}x&nbsp;&nbsp;&nbsp;</label>\n                      <input type=\"checkbox\" className=\"checkboxWorkout checkbox-item\" id={item.id} name={item.id} value={item.id} \n                      onClick={() => workoutChecked(item.id)}/>\n                    </div>\n                  </div>\n                )\n              }\n            })\n          }\n        </div>\n      </Box>\n    )\n  }\n\n  return (\n    <div>\n      <div>{ <WorkoutList /> }</div>\n      <div>{ <CompleteMessage /> }</div>\n    </div>\n  );\n}\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}