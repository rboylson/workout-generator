{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/workout-generator/src/components/ExerciseGrid.js\",\n    _s = $RefreshSig$();\n\nimport './ExerciseGrid.scss';\nimport { useEffect, useState, useCallback } from 'react';\nimport DataGrid, { SortableHeaderCell } from 'react-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExerciseGrid() {\n  _s();\n\n  const [editable, setEditable] = useState(true); // const columns = [\n  //   { key: 'id', name: 'ID' },\n  //   { key: 'name', name: 'Name' },\n  //   { key: 'type', name: 'Type' },\n  //   { key: 'timing', name: 'Timing', editable: state.editable },\n  //   { key: 'target', name: 'Target' }\n  // ];\n\n  const getColumns = state => {\n    return [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'name',\n      name: 'Name'\n    }, {\n      key: 'type',\n      name: 'Type'\n    }, {\n      key: 'timing',\n      name: 'Timing',\n      editable: editable\n    }, {\n      key: 'target',\n      name: 'Target'\n    }];\n  };\n\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/workouts').then(response => response.json()).then(setList);\n  }, []);\n  let people = list;\n  const [dataSource, setDataSource] = useState(people);\n  const onEditComplete = useCallback(({\n    value,\n    columnId,\n    rowIndex\n  }) => {\n    const data = [...dataSource];\n    data[rowIndex][columnId] = value;\n    setDataSource(data);\n  }, [dataSource]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ExerciseGrid\",\n    children: [/*#__PURE__*/_jsxDEV(SortableHeaderCell, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: getColumns,\n      rows: list,\n      onEditComplete: onEditComplete,\n      editable: true // enableCellSelect={true}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExerciseGrid, \"9742Lra1S2hf9TumY1T9qPuCdA4=\");\n\n_c = ExerciseGrid;\nexport default ExerciseGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExerciseGrid\");","map":{"version":3,"sources":["/Users/rachel/workout-generator/src/components/ExerciseGrid.js"],"names":["useEffect","useState","useCallback","DataGrid","SortableHeaderCell","ExerciseGrid","editable","setEditable","getColumns","state","key","name","list","setList","fetch","then","response","json","people","dataSource","setDataSource","onEditComplete","value","columnId","rowIndex","data"],"mappings":";;;AAAA,OAAO,qBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,QAAP,IAAmBC,kBAAnB,QAA8C,iBAA9C;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC,CAFsB,CAItB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMO,UAAU,GAAIC,KAAD,IAAW;AAC5B,WAAO,CACL;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KADK,EAEL;AAAED,MAAAA,GAAG,EAAE,MAAP;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAFK,EAGL;AAAED,MAAAA,GAAG,EAAE,MAAP;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAHK,EAIL;AAAED,MAAAA,GAAG,EAAE,QAAP;AAAiBC,MAAAA,IAAI,EAAE,QAAvB;AAAiCL,MAAAA,QAAQ,EAAEA;AAA3C,KAJK,EAKL;AAAEI,MAAAA,GAAG,EAAE,QAAP;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KALK,CAAP;AAOD,GARD;;AAUA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACZc,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQF,OAFR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,MAAIK,MAAM,GAAGN,IAAb;AAEA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAACiB,MAAD,CAA5C;AAEA,QAAMG,cAAc,GAAGnB,WAAW,CAAC,CAAC;AAAEoB,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAD,KAAmC;AACpE,UAAMC,IAAI,GAAG,CAAC,GAAGN,UAAJ,CAAb;AACAM,IAAAA,IAAI,CAACD,QAAD,CAAJ,CAAeD,QAAf,IAA2BD,KAA3B;AAEAF,IAAAA,aAAa,CAACK,IAAD,CAAb;AACD,GALiC,EAK/B,CAACN,UAAD,CAL+B,CAAlC;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEK,QAAC,QAAD;AACC,MAAA,OAAO,EAAEX,UADV;AAEC,MAAA,IAAI,EAAEI,IAFP;AAGC,MAAA,cAAc,EAAES,cAHjB;AAIC,MAAA,QAAQ,MAJT,CAKC;;AALD;AAAA;AAAA;AAAA;AAAA,YAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArDQhB,Y;;KAAAA,Y;AAuDT,eAAeA,YAAf","sourcesContent":["import './ExerciseGrid.scss';\nimport { useEffect, useState, useCallback } from 'react';\nimport DataGrid, { SortableHeaderCell }  from 'react-data-grid';\n\nfunction ExerciseGrid() {\n\n  const [editable, setEditable] = useState(true);\n\n  // const columns = [\n  //   { key: 'id', name: 'ID' },\n  //   { key: 'name', name: 'Name' },\n  //   { key: 'type', name: 'Type' },\n  //   { key: 'timing', name: 'Timing', editable: state.editable },\n  //   { key: 'target', name: 'Target' }\n  // ];\n\n  const getColumns = (state) => {\n    return [\n      { key: 'id', name: 'ID' },\n      { key: 'name', name: 'Name' },\n      { key: 'type', name: 'Type' },\n      { key: 'timing', name: 'Timing', editable: editable },\n      { key: 'target', name: 'Target' }\n    ]\n  }\n\n  const [list, setList] = useState([]);\n\n  useEffect(()=>{\n    fetch('http://localhost:3000/workouts')\n      .then(response => response.json())\n      .then(setList);\n  }, []);\n\n  let people = list;\n\n  const [dataSource, setDataSource] = useState(people)\n\n  const onEditComplete = useCallback(({ value, columnId, rowIndex }) => {\n    const data = [...dataSource];\n    data[rowIndex][columnId] = value;\n\n    setDataSource(data)\n  }, [dataSource])\n\n  return (\n    <div className=\"ExerciseGrid\">\n      <SortableHeaderCell />\n         <DataGrid \n          columns={getColumns} \n          rows={list} \n          onEditComplete={onEditComplete}\n          editable\n          // enableCellSelect={true}\n        />\n    </div>\n  );\n}\n\nexport default ExerciseGrid;\n"]},"metadata":{},"sourceType":"module"}